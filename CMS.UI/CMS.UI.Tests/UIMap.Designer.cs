// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CMS.UI.Tests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Valid credentials
        /// </summary>
        public void LoginRecorded()
        {
            #region Variable Declarations
            WpfEdit uILoginBoxEdit = this.UICMSLogInWindow.UILoginBoxEdit;
            WpfEdit uIPasswordBoxEdit = this.UICMSLogInWindow.UIPasswordBoxEdit;
            #endregion

            // Type 'testlogin' in 'LoginBox' text box
            uILoginBoxEdit.Text = this.LoginRecordedParams.UILoginBoxEditText;

            // Click 'PasswordBox' text box
            Mouse.Click(uIPasswordBoxEdit, new Point(70, 14));

            // Type '********' in 'PasswordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.LoginRecordedParams.UIPasswordBoxEditSendKeys, true);
        }
        
        /// <summary>
        /// UserPanelAssert - Use 'UserPanelAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void UserPanelAssert()
        {
            #region Variable Declarations
            WpfText uIUSERPANELText = this.UIUserPanelWindow.UIUserPanelCustom.UIUSERPANELText;
            #endregion

            // Verify that the 'ControlType' property of 'USER PANEL' label equals 'Text'
            Assert.AreEqual(this.UserPanelAssertExpectedValues.UIUSERPANELTextControlType, uIUSERPANELText.ControlType.ToString(), "USER PANEL");
        }
        
        /// <summary>
        /// LoginOldCredentialsRecorded - Use 'LoginOldCredentialsRecordedParams' to pass parameters into this method.
        /// </summary>
        public void LoginOldCredentialsRecorded()
        {
            #region Variable Declarations
            WpfButton uIChangePasswordButton = this.UIUserPanelWindow.UIChangePasswordButton;
            WpfEdit uIOldPassBoxEdit = this.UIChangePasswordWindow.UIOldPassBoxEdit;
            WpfEdit uINewPasswordBoxEdit = this.UIChangePasswordWindow.UINewPasswordBoxEdit;
            WpfEdit uIConfNewPasswordBoxEdit = this.UIChangePasswordWindow.UIConfNewPasswordBoxEdit;
            WpfButton uIChangepasswordButton1 = this.UIChangePasswordWindow.UIChangepasswordButton;
            WpfEdit uILoginBoxEdit = this.UICMSLogInWindow.UILoginBoxEdit;
            WpfEdit uIPasswordBoxEdit = this.UICMSLogInWindow.UIPasswordBoxEdit;
            WpfButton uILogInButton = this.UICMSLogInWindow.UILogInButton;
            #endregion

            // Click 'Change Password' button
            Mouse.Click(uIChangePasswordButton, new Point(69, 12));

            // Click 'OldPassBox' text box
            Mouse.Click(uIOldPassBoxEdit, new Point(79, 14));

            // Type '********' in 'OldPassBox' text box
            Keyboard.SendKeys(uIOldPassBoxEdit, this.LoginOldCredentialsRecordedParams.UIOldPassBoxEditSendKeys, true);

            // Click 'NewPasswordBox' text box
            Mouse.Click(uINewPasswordBoxEdit, new Point(58, 12));

            // Type '********' in 'NewPasswordBox' text box
            Keyboard.SendKeys(uINewPasswordBoxEdit, this.LoginOldCredentialsRecordedParams.UINewPasswordBoxEditSendKeys, true);

            // Click 'ConfNewPasswordBox' text box
            Mouse.Click(uIConfNewPasswordBoxEdit, new Point(51, 15));

            // Type '********' in 'ConfNewPasswordBox' text box
            Keyboard.SendKeys(uIConfNewPasswordBoxEdit, this.LoginOldCredentialsRecordedParams.UIConfNewPasswordBoxEditSendKeys, true);

            // Click 'Change password' button
            Mouse.Click(uIChangepasswordButton1, new Point(20, 16));

            // Type 'testlogin' in 'LoginBox' text box
            uILoginBoxEdit.Text = this.LoginOldCredentialsRecordedParams.UILoginBoxEditText;

            // Click 'PasswordBox' text box
            Mouse.Click(uIPasswordBoxEdit, new Point(40, 8));

            // Type '********' in 'PasswordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.LoginOldCredentialsRecordedParams.UIPasswordBoxEditSendKeys, true);

            // Type '********' in 'PasswordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.LoginOldCredentialsRecordedParams.UIPasswordBoxEditSendKeys1, true);

            // Click 'Log In' button
            Mouse.Click(uILogInButton, new Point(14, 7));
        }
        
        /// <summary>
        /// LoginFailedAssert - Use 'LoginFailedAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void LoginFailedAssert()
        {
            #region Variable Declarations
            WpfText uILoginFailedText1 = this.UICMSLogInWindow.UILoginFailedText.UILoginFailedText1;
            #endregion

            // Verify that the 'ControlType' property of 'Login Failed!' label equals 'Text'
            Assert.AreEqual(this.LoginFailedAssertExpectedValues.UILoginFailedText1ControlType, uILoginFailedText1.ControlType.ToString(), "Login Failed!");
        }
        
        /// <summary>
        /// LoginWithChangedPassRecorded - Use 'LoginWithChangedPassRecordedParams' to pass parameters into this method.
        /// </summary>
        public void LoginWithChangedPassRecorded()
        {
            #region Variable Declarations
            WpfEdit uIPasswordBoxEdit = this.UICMSLogInWindow.UIPasswordBoxEdit;
            WpfWindow uICMSLogInWindow = this.UICMSLogInWindow;
            WpfButton uILogInButton = this.UICMSLogInWindow.UILogInButton;
            WpfButton uIChangePasswordButton = this.UIUserPanelWindow.UIChangePasswordButton;
            WpfEdit uIOldPassBoxEdit = this.UIChangePasswordWindow.UIOldPassBoxEdit;
            WpfEdit uINewPasswordBoxEdit = this.UIChangePasswordWindow.UINewPasswordBoxEdit;
            WpfEdit uIConfNewPasswordBoxEdit = this.UIChangePasswordWindow.UIConfNewPasswordBoxEdit;
            WpfButton uIChangepasswordButton1 = this.UIChangePasswordWindow.UIChangepasswordButton;
            WpfEdit uILoginBoxEdit = this.UICMSLogInWindow.UILoginBoxEdit;
            #endregion

            // Move 'PasswordBox' text box to 'CMS Log In' window
            uICMSLogInWindow.EnsureClickable(new Point(22, 156));
            Mouse.StartDragging(uIPasswordBoxEdit, new Point(71, 8));
            Mouse.StopDragging(uICMSLogInWindow, new Point(22, 156));

            // Type '********' in 'PasswordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.LoginWithChangedPassRecordedParams.UIPasswordBoxEditSendKeys, true);

            // Click 'Log In' button
            Mouse.Click(uILogInButton, new Point(14, 4));

            // Click 'Change Password' button
            Mouse.Click(uIChangePasswordButton, new Point(40, 19));

            // Click 'OldPassBox' text box
            Mouse.Click(uIOldPassBoxEdit, new Point(50, 20));

            // Type '********' in 'OldPassBox' text box
            Keyboard.SendKeys(uIOldPassBoxEdit, this.LoginWithChangedPassRecordedParams.UIOldPassBoxEditSendKeys, true);

            // Click 'NewPasswordBox' text box
            Mouse.Click(uINewPasswordBoxEdit, new Point(64, 25));

            // Type '********' in 'NewPasswordBox' text box
            Keyboard.SendKeys(uINewPasswordBoxEdit, this.LoginWithChangedPassRecordedParams.UINewPasswordBoxEditSendKeys, true);

            // Click 'ConfNewPasswordBox' text box
            Mouse.Click(uIConfNewPasswordBoxEdit, new Point(77, 13));

            // Type '********' in 'ConfNewPasswordBox' text box
            Keyboard.SendKeys(uIConfNewPasswordBoxEdit, this.LoginWithChangedPassRecordedParams.UIConfNewPasswordBoxEditSendKeys, true);

            // Click 'Change password' button
            Mouse.Click(uIChangepasswordButton1, new Point(59, 6));

            // Type 'testlogin' in 'LoginBox' text box
            uILoginBoxEdit.Text = this.LoginWithChangedPassRecordedParams.UILoginBoxEditText;

            // Click 'PasswordBox' text box
            Mouse.Click(uIPasswordBoxEdit, new Point(73, 11));

            // Type '********' in 'PasswordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.LoginWithChangedPassRecordedParams.UIPasswordBoxEditSendKeys1, true);

            // Click 'Log In' button
            Mouse.Click(uILogInButton, new Point(33, 17));
        }
        
        /// <summary>
        /// UserNameAssert - Use 'UserNameAssertExpectedValues' to pass parameters into this method.
        /// </summary>
        public void UserNameAssert()
        {
            #region Variable Declarations
            WpfText uITestloginText1 = this.UIUserPanelWindow.UITestloginText.UITestloginText1;
            #endregion

            // Verify that the 'ControlType' property of 'testlogin' label equals 'Text'
            Assert.AreEqual(this.UserNameAssertExpectedValues.UITestloginText1ControlType, uITestloginText1.ControlType.ToString(), "testlogin");
        }
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WpfEdit uILoginBoxEdit = this.UICMSLogInWindow.UILoginBoxEdit;
            WpfEdit uIPasswordBoxEdit = this.UICMSLogInWindow.UIPasswordBoxEdit;
            WpfButton uILogInButton = this.UICMSLogInWindow.UILogInButton;
            WpfList uIConferenceListList = this.UIUserPanelWindow.UIConferenceListList;
            WpfButton uIGoToConferenceButton = this.UIUserPanelWindow.UIGoToConferenceButton;
            WpfList uISessionListList = this.UIConferenceHomeWindow.UISessionListList;
            WpfListItem uICMSBEDTOSessionDTOListItem = this.UIConferenceHomeWindow.UISessionListList.UICMSBEDTOSessionDTOListItem;
            WpfButton uIPART_CloseButton = this.UISessionDetailsWindow.UIPART_CloseButton;
            WpfListItem uICMSBEDTOSpecialSessiListItem = this.UIConferenceHomeWindow.UISpecialSessionListList.UICMSBEDTOSpecialSessiListItem;
            WpfButton uIPART_CloseButton1 = this.UISpecialsessiondetailWindow.UIPART_CloseButton;
            WpfButton uIPART_CloseButton2 = this.UIEventDetailsWindow.UIPART_CloseButton;
            #endregion

            // Last mouse action was not recorded.

            // Type 'manager' in 'LoginBox' text box
            uILoginBoxEdit.Text = this.RecordedMethod1Params.UILoginBoxEditText;

            // Click 'PasswordBox' text box
            Mouse.Click(uIPasswordBoxEdit, new Point(95, 18));

            // Type '********' in 'PasswordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.RecordedMethod1Params.UIPasswordBoxEditSendKeys, true);

            // Click 'Log In' button
            Mouse.Click(uILogInButton, new Point(39, 14));

            // Select 'CMS.BE.DTO.ConferenceDTO' in 'ConferenceList' list box
            uIConferenceListList.SelectedItemsAsString = this.RecordedMethod1Params.UIConferenceListListSelectedItemsAsString;

            // Click 'Go To Conference' button
            Mouse.Click(uIGoToConferenceButton, new Point(78, 20));

            // Select 'CMS.BE.DTO.SessionDTO' in 'SessionList' list box
            uISessionListList.SelectedItemsAsString = this.RecordedMethod1Params.UISessionListListSelectedItemsAsString;

            // Click 'CMS.BE.DTO.SessionDTO' list item
            Mouse.Click(uICMSBEDTOSessionDTOListItem, new Point(238, 17));

            // Double-Click 'CMS.BE.DTO.SessionDTO' list item
            Mouse.DoubleClick(uICMSBEDTOSessionDTOListItem, new Point(238, 17));

            // Click 'PART_Close' button
            Mouse.Click(uIPART_CloseButton, new Point(21, 14));

            // Double-Click 'CMS.BE.DTO.SpecialSessionDTO' list item
            Mouse.DoubleClick(uICMSBEDTOSpecialSessiListItem, new Point(173, 9));

            // Click 'PART_Close' button
            Mouse.Click(uIPART_CloseButton1, new Point(29, 18));

            // Last action on list item was not recorded because the control does not have any good identification property.

            // Last action on list item was not recorded because the control does not have any good identification property.

            // Last action on list item was not recorded because the control does not have any good identification property.

            // Last action on list item was not recorded because the control does not have any good identification property.

            // Last action on list item was not recorded because the control does not have any good identification property.

            // Last action on list item was not recorded because the control does not have any good identification property.

            // Click 'PART_Close' button
            Mouse.Click(uIPART_CloseButton2, new Point(14, 11));
        }
        
        /// <summary>
        /// CMSClientTest - Use 'CMSClientTestParams' to pass parameters into this method.
        /// </summary>
        public void CMSClientTest()
        {
            #region Variable Declarations
            WpfEdit uILoginBoxEdit = this.UICMSLogInWindow.UILoginBoxEdit;
            WpfEdit uIPasswordBoxEdit = this.UICMSLogInWindow.UIPasswordBoxEdit;
            WpfButton uILogInButton = this.UICMSLogInWindow.UILogInButton;
            WpfButton uIChangePasswordButton = this.UIUserPanelWindow.UIChangePasswordButton;
            WpfEdit uIOldPassBoxEdit = this.UIChangePasswordWindow1.UIOldPassBoxEdit;
            WpfEdit uINewPasswordBoxEdit = this.UIChangePasswordWindow1.UINewPasswordBoxEdit;
            WpfEdit uIConfNewPasswordBoxEdit = this.UIChangePasswordWindow1.UIConfNewPasswordBoxEdit;
            WpfButton uIChangepasswordButton1 = this.UIChangePasswordWindow1.UIChangepasswordButton;
            WpfButton uICancelButton = this.UIChangePasswordWindow1.UICancelButton;
            WpfList uIConferenceListList = this.UIUserPanelWindow.UIConferenceListList;
            WpfButton uIGoToConferenceButton = this.UIUserPanelWindow.UIGoToConferenceButton;
            WpfListItem uICMSBEDTOSpecialSessiListItem = this.UIConferenceHomeWindow.UISpecialSessionListList.UICMSBEDTOSpecialSessiListItem;
            WpfButton uIPART_CloseButton = this.UISpecialsessiondetailWindow.UIPART_CloseButton;
            WpfListItem uICMSBEDTOSessionDTOListItem = this.UIConferenceHomeWindow.UISessionListList.UICMSBEDTOSessionDTOListItem;
            WpfButton uIPART_CloseButton1 = this.UISessionDetailsWindow.UIPART_CloseButton;
            WpfButton uIAccomButtonButton = this.UIConferenceHomeWindow.UIAccomButtonButton;
            WpfButton uINextButton = this.UIAccommodationOptionsWindow.UINextButton;
            WpfButton uIPART_CloseButton2 = this.UIAccommodationOptionsWindow.UIPART_CloseButton;
            WpfButton uITravelButtonButton = this.UIConferenceHomeWindow.UITravelButtonButton;
            WpfButton uINextButton1 = this.UITravelInfoWindow.UINextButton;
            WpfButton uIPART_CloseButton3 = this.UITravelInfoWindow.UIPART_CloseButton;
            WpfButton uIEmergButtonButton = this.UIConferenceHomeWindow.UIEmergButtonButton;
            WpfButton uIBackButton = this.UIEmergencyInfoWindow.UIBackButton;
            WpfButton uIUserPanelButton = this.UIConferenceHomeWindow.UIUserPanelButton;
            WpfButton uIManagerPanelButton = this.UIUserPanelWindow.UIManagerPanelButton;
            WpfListItem uICMSBEDTOSessionDTOListItem1 = this.UIManagerPanelWindow.UISessionListList.UICMSBEDTOSessionDTOListItem;
            WpfListItem uICMSBEDTOSpecialSessiListItem1 = this.UIManagerPanelWindow.UISpecialSessionListList.UICMSBEDTOSpecialSessiListItem;
            WpfButton uIAccomButtonButton1 = this.UIManagerPanelWindow.UIAccomButtonButton;
            WpfButton uITravelButtonButton1 = this.UIManagerPanelWindow.UITravelButtonButton;
            WpfButton uIEmergButtonButton1 = this.UIManagerPanelWindow.UIEmergButtonButton;
            WpfButton uIPART_CloseButton4 = this.UIEmergencyInfoWindow.UIPART_CloseButton;
            WpfButton uIManageAccountButton = this.UIManagerPanelWindow.UIManageAccountButton;
            WpfButton uIAddAccountButton = this.UIManageAccountWindow.UIAddAccountButton;
            WpfButton uICancelButton1 = this.UIAddAccountWindow.UICancelButton;
            WpfEdit uILoginBoxEdit1 = this.UIManageAccountWindow.UILoginBoxEdit;
            WpfButton uIEditAccountButton = this.UIManageAccountWindow.UIEditAccountButton;
            WpfButton uICancelButton2 = this.UIEditAccountWindow.UICancelButton;
            WpfButton uILoadRolesButton = this.UIManageAccountWindow.UILoadRolesButton;
            WpfComboBox uIAccountRoleBoxComboBox = this.UIManageAccountWindow.UIAccountRoleBoxComboBox;
            WpfComboBox uIRoleBoxComboBox = this.UIManageAccountWindow.UIRoleBoxComboBox;
            WpfButton uIPART_CloseButton5 = this.UIManageAccountWindow.UIPART_CloseButton;
            WpfButton uIManageAuthorButton = this.UIManagerPanelWindow.UIManageAuthorButton;
            WpfEdit uIAuthorBoxEdit = this.UIManageAuthorWindow.UIAuthorBoxEdit;
            WpfButton uIEditAuthorButton = this.UIManageAuthorWindow.UIEditAuthorButton;
            WpfButton uICancelButton3 = this.UIEditAuthorWindow.UICancelButton;
            WpfButton uIPART_CloseButton6 = this.UIManageAuthorWindow.UIPART_CloseButton;
            WpfButton uIManageEventButton = this.UIManagerPanelWindow.UIManageEventButton;
            WpfButton uIPART_CloseButton7 = this.UIManageEventsWindow.UIPART_CloseButton;
            WpfButton uIManageAwardsButton = this.UIManagerPanelWindow.UIManageAwardsButton;
            WpfList uISessionListList = this.UIManageAwardsWindow.UISessionListList;
            WpfComboBox uISessionComboBoxComboBox = this.UIManageAwardsWindow.UISessionComboBoxComboBox;
            WpfButton uIPART_CloseButton8 = this.UIManageAwardsWindow.UIPART_CloseButton;
            WpfButton uIManageTasksButton = this.UIManagerPanelWindow.UIManageTasksButton;
            WpfButton uIPART_CloseButton9 = this.UIManageTasksWindow.UIPART_CloseButton;
            WpfButton uIManageSessionsButton = this.UIManagerPanelWindow.UIManageSessionsButton;
            WpfButton uIAddButton = this.UISessionsWindow.UIAddButton;
            WpfButton uIM3452H31V385C2966399Button = this.UIAddSessionWindow.UIM3452H31V385C2966399Button;
            WpfCalendar uIPART_CalendarCalendar = this.UIAddSessionWindow.UIPART_CalendarCalendar;
            WpfWindow uIAddSessionWindow = this.UIAddSessionWindow;
            WpfButton uIM3452H31V385C2966399Button1 = this.UIAddSessionWindow.UIM3452H31V385C2966399Button1;
            WpfCalendar uIPART_CalendarCalendar1 = this.UIAddSessionWindow.UIPART_CalendarCalendar1;
            WpfComboBox uIPART_HourPickerComboBox = this.UIAddSessionWindow.UIPART_HourPickerComboBox;
            WpfEdit uIChairmanBoxEdit = this.UIAddSessionWindow.UIChairmanBoxEdit;
            WpfComboBox uIBuildingBoxComboBox = this.UIAddSessionWindow.UIBuildingBoxComboBox;
            WpfCheckBox uISpecialsessionCheckBox = this.UIAddSessionWindow.UISpecialsessionCheckBox;
            WpfButton uICancelButton4 = this.UIAddSessionWindow.UICancelButton;
            WpfButton uIPART_CloseButton10 = this.UISessionsWindow.UIPART_CloseButton;
            WpfButton uIManageEmergencyButton = this.UIManagerPanelWindow.UIManageEmergencyButton;
            WpfButton uIPART_CloseButton11 = this.UIEditEmergencyInfoWindow.UIPART_CloseButton;
            WpfButton uIManageAccommodationButton = this.UIManagerPanelWindow.UIManageAccommodationButton;
            WpfButton uIPART_CloseButton12 = this.UIManageAccommodationOWindow.UIPART_CloseButton;
            WpfButton uIManageTravelButton = this.UIManagerPanelWindow.UIManageTravelButton;
            WpfButton uIPART_CloseButton13 = this.UIManageTravelOptionsWindow.UIPART_CloseButton;
            WpfButton uIManageWelcomePackButton = this.UIManagerPanelWindow.UIManageWelcomePackButton;
            WpfButton uIPART_CloseButton14 = this.UIGuestsListWindow.UIPART_CloseButton;
            WpfButton uILogoutButton = this.UIManagerPanelWindow.UILogoutButton;
            WpfButton uIAuthorPanelButton = this.UIUserPanelWindow.UIAuthorPanelButton;
            WpfButton uIAddButton1 = this.UIAuthorPanelWindow.UIAddButton;
            WpfCheckBox uISpecialSessionCheckBox1 = this.UISubmitArticlesWindow.UISpecialSessionCheckBox;
            WpfComboBox uISSListComboBox = this.UISubmitArticlesWindow.UISSListComboBox;
            WpfButton uICancelButton5 = this.UISubmitArticlesWindow.UICancelButton;
            WpfButton uILogoutButton1 = this.UIAuthorPanelWindow.UILogoutButton;
            WpfButton uIReviewArticlesButton = this.UIManagerPanelWindow.UIReviewArticlesButton;
            WpfButton uIMyReviewsButton = this.UIReviewerPanelWindow.UIMyReviewsButton;
            WpfButton uIPART_CloseButton15 = this.UIMyReviewsWindow.UIPART_CloseButton;
            WpfButton uIPART_CloseButton16 = this.UIReviewerPanelWindow.UIPART_CloseButton;
            #endregion

            // Type 'manager' in 'LoginBox' text box
            uILoginBoxEdit.Text = this.CMSClientTestParams.UILoginBoxEditText;

            // Click 'PasswordBox' text box
            Mouse.Click(uIPasswordBoxEdit, new Point(80, 18));

            // Type '********' in 'PasswordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.CMSClientTestParams.UIPasswordBoxEditSendKeys, true);

            // Click 'Log In' button
            Mouse.Click(uILogInButton, new Point(33, 17));

            // Click 'Change Password' button
            Mouse.Click(uIChangePasswordButton, new Point(73, 12));

            // Click 'OldPassBox' text box
            Mouse.Click(uIOldPassBoxEdit, new Point(64, 16));

            // Type '********' in 'OldPassBox' text box
            Keyboard.SendKeys(uIOldPassBoxEdit, this.CMSClientTestParams.UIOldPassBoxEditSendKeys, true);

            // Click 'NewPasswordBox' text box
            Mouse.Click(uINewPasswordBoxEdit, new Point(78, 11));

            // Type '********' in 'NewPasswordBox' text box
            Keyboard.SendKeys(uINewPasswordBoxEdit, this.CMSClientTestParams.UINewPasswordBoxEditSendKeys, true);

            // Click 'ConfNewPasswordBox' text box
            Mouse.Click(uIConfNewPasswordBoxEdit, new Point(102, 15));

            // Type '********' in 'ConfNewPasswordBox' text box
            Keyboard.SendKeys(uIConfNewPasswordBoxEdit, this.CMSClientTestParams.UIConfNewPasswordBoxEditSendKeys, true);

            // Click 'Change password' button
            Mouse.Click(uIChangepasswordButton1, new Point(125, 6));

            // Type 'manager' in 'LoginBox' text box
            uILoginBoxEdit.Text = this.CMSClientTestParams.UILoginBoxEditText1;

            // Click 'PasswordBox' text box
            Mouse.Click(uIPasswordBoxEdit, new Point(72, 2));

            // Type '********' in 'PasswordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.CMSClientTestParams.UIPasswordBoxEditSendKeys1, true);

            // Click 'Log In' button
            Mouse.Click(uILogInButton, new Point(65, 19));

            // Click 'Change Password' button
            Mouse.Click(uIChangePasswordButton, new Point(84, 18));

            // Click 'OldPassBox' text box
            Mouse.Click(uIOldPassBoxEdit, new Point(79, 16));

            // Type '********' in 'OldPassBox' text box
            Keyboard.SendKeys(uIOldPassBoxEdit, this.CMSClientTestParams.UIOldPassBoxEditSendKeys1, true);

            // Click 'NewPasswordBox' text box
            Mouse.Click(uINewPasswordBoxEdit, new Point(69, 7));

            // Type '********' in 'NewPasswordBox' text box
            Keyboard.SendKeys(uINewPasswordBoxEdit, this.CMSClientTestParams.UINewPasswordBoxEditSendKeys1, true);

            // Click 'ConfNewPasswordBox' text box
            Mouse.Click(uIConfNewPasswordBoxEdit, new Point(62, 4));

            // Type '********' in 'ConfNewPasswordBox' text box
            Keyboard.SendKeys(uIConfNewPasswordBoxEdit, this.CMSClientTestParams.UIConfNewPasswordBoxEditSendKeys1, true);

            // Click 'Change password' button
            Mouse.Click(uIChangepasswordButton1, new Point(56, 6));

            // Type 'manager' in 'LoginBox' text box
            uILoginBoxEdit.Text = this.CMSClientTestParams.UILoginBoxEditText2;

            // Click 'PasswordBox' text box
            Mouse.Click(uIPasswordBoxEdit, new Point(79, 19));

            // Type '********' in 'PasswordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.CMSClientTestParams.UIPasswordBoxEditSendKeys2, true);

            // Click 'Log In' button
            Mouse.Click(uILogInButton, new Point(53, 13));

            // Click 'Change Password' button
            Mouse.Click(uIChangePasswordButton, new Point(48, 6));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(33, 16));

            // Select 'CMS.BE.DTO.ConferenceDTO' in 'ConferenceList' list box
            uIConferenceListList.SelectedItemsAsString = this.CMSClientTestParams.UIConferenceListListSelectedItemsAsString;

            // Click 'Go To Conference' button
            Mouse.Click(uIGoToConferenceButton, new Point(36, 7));

            // Last action on list item was not recorded because the control does not have any good identification property.

            // Double-Click 'CMS.BE.DTO.SpecialSessionDTO' list item
            Mouse.DoubleClick(uICMSBEDTOSpecialSessiListItem, new Point(115, 16));

            // Click 'PART_Close' button
            Mouse.Click(uIPART_CloseButton, new Point(10, 12));

            // Double-Click 'CMS.BE.DTO.SessionDTO' list item
            Mouse.DoubleClick(uICMSBEDTOSessionDTOListItem, new Point(220, 15));

            // Click 'PART_Close' button
            Mouse.Click(uIPART_CloseButton1, new Point(26, 15));

            // Click 'AccomButton' button
            Mouse.Click(uIAccomButtonButton, new Point(20, 33));

            // Click 'Next' button
            Mouse.Click(uINextButton, new Point(23, 14));

            // Click 'Next' button
            Mouse.Click(uINextButton, new Point(23, 14));

            // Click 'Next' button
            Mouse.Click(uINextButton, new Point(23, 14));

            // Click 'PART_Close' button
            Mouse.Click(uIPART_CloseButton2, new Point(17, 16));

            // Click 'TravelButton' button
            Mouse.Click(uITravelButtonButton, new Point(38, 36));

            // Click 'Next' button
            Mouse.Click(uINextButton1, new Point(33, 13));

            // Click 'PART_Close' button
            Mouse.Click(uIPART_CloseButton3, new Point(19, 14));

            // Click 'EmergButton' button
            Mouse.Click(uIEmergButtonButton, new Point(26, 15));

            // Click 'Back' button
            Mouse.Click(uIBackButton, new Point(38, 12));

            // Click 'User Panel' button
            Mouse.Click(uIUserPanelButton, new Point(47, 15));

            // Select 'CMS.BE.DTO.ConferenceDTO' in 'ConferenceList' list box
            uIConferenceListList.SelectedItemsAsString = this.CMSClientTestParams.UIConferenceListListSelectedItemsAsString1;

            // Click 'Manager Panel' button
            Mouse.Click(uIManagerPanelButton, new Point(87, 15));

            // Double-Click 'CMS.BE.DTO.SessionDTO' list item
            Mouse.DoubleClick(uICMSBEDTOSessionDTOListItem1, new Point(196, 13));

            // Click 'PART_Close' button
            Mouse.Click(uIPART_CloseButton1, new Point(2, 10));

            // Double-Click 'CMS.BE.DTO.SpecialSessionDTO' list item
            Mouse.DoubleClick(uICMSBEDTOSpecialSessiListItem1, new Point(141, 14));

            // Click 'PART_Close' button
            Mouse.Click(uIPART_CloseButton, new Point(18, 14));

            // Last action on list item was not recorded because the control does not have any good identification property.

            // Click 'AccomButton' button
            Mouse.Click(uIAccomButtonButton1, new Point(22, 17));

            // Click 'PART_Close' button
            Mouse.Click(uIPART_CloseButton2, new Point(13, 18));

            // Click 'TravelButton' button
            Mouse.Click(uITravelButtonButton1, new Point(20, 40));

            // Click 'PART_Close' button
            Mouse.Click(uIPART_CloseButton3, new Point(25, 16));

            // Click 'EmergButton' button
            Mouse.Click(uIEmergButtonButton1, new Point(39, 30));

            // Click 'PART_Close' button
            Mouse.Click(uIPART_CloseButton4, new Point(12, 13));

            // Click 'Manage Account' button
            Mouse.Click(uIManageAccountButton, new Point(222, 28));

            // Click 'Add Account' button
            Mouse.Click(uIAddAccountButton, new Point(114, 14));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton1, new Point(40, 16));

            // Type 'testlogin' in 'LoginBox' text box
            uILoginBoxEdit1.Text = this.CMSClientTestParams.UILoginBoxEditText3;

            // Click 'Edit Account' button
            Mouse.Click(uIEditAccountButton, new Point(77, 12));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton2, new Point(30, 13));

            // Click 'Load Roles' button
            Mouse.Click(uILoadRolesButton, new Point(39, 14));

            // Click 'AccountRoleBox' combo box
            Mouse.Click(uIAccountRoleBoxComboBox, new Point(133, 13));

            // Click 'AccountRoleBox' combo box
            Mouse.Click(uIAccountRoleBoxComboBox, new Point(133, 13));

            // Type 'guest' in 'LoginBox' text box
            uILoginBoxEdit1.Text = this.CMSClientTestParams.UILoginBoxEditText4;

            // Click 'Edit Account' button
            Mouse.Click(uIEditAccountButton, new Point(106, 14));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton2, new Point(33, 18));

            // Click 'Load Roles' button
            Mouse.Click(uILoadRolesButton, new Point(6, 12));

            // Click 'AccountRoleBox' combo box
            Mouse.Click(uIAccountRoleBoxComboBox, new Point(134, 12));

            // Click 'AccountRoleBox' combo box
            Mouse.Click(uIAccountRoleBoxComboBox, new Point(134, 12));

            // Click 'RoleBox' combo box
            Mouse.Click(uIRoleBoxComboBox, new Point(134, 20));

            // Click 'RoleBox' combo box
            Mouse.Click(uIRoleBoxComboBox, new Point(134, 20));

            // Click 'PART_Close' button
            Mouse.Click(uIPART_CloseButton5, new Point(10, 16));

            // Click 'Manage Author' button
            Mouse.Click(uIManageAuthorButton, new Point(223, 27));

            // Type 'author1' in 'AuthorBox' text box
            uIAuthorBoxEdit.Text = this.CMSClientTestParams.UIAuthorBoxEditText;

            // Click 'Edit Author' button
            Mouse.Click(uIEditAuthorButton, new Point(82, 20));

            // Click 'Cancel' button
            Mouse.Click(uICancelButton3, new Point(14, 14));

            // Click 'PART_Close' button
            Mouse.Click(uIPART_CloseButton6, new Point(22, 9));

            // Click 'Manage Event' button
            Mouse.Click(uIManageEventButton, new Point(183, 19));

            // Last action on list item was not recorded because the control does not have any good identification property.

            // Click 'PART_Close' button
            Mouse.Click(uIPART_CloseButton7, new Point(21, 19));

            // Click 'Manage Awards' button
            Mouse.Click(uIManageAwardsButton, new Point(198, 29));

            // Select 'CMS.BE.DTO.SessionDTO' in 'SessionList' list box
            uISessionListList.SelectedItemsAsString = this.CMSClientTestParams.UISessionListListSelectedItemsAsString;

            // Select 'SpecialSession' in 'SessionComboBox' combo box
            uISessionComboBoxComboBox.SelectedItem = this.CMSClientTestParams.UISessionComboBoxComboBoxSelectedItem;

            // Select 'CMS.BE.DTO.SpecialSessionDTO' in 'SessionList' list box
            uISessionListList.SelectedItemsAsString = this.CMSClientTestParams.UISessionListListSelectedItemsAsString1;

            // Click 'PART_Close' button
            Mouse.Click(uIPART_CloseButton8, new Point(28, 12));

            // Click 'Manage Tasks' button
            Mouse.Click(uIManageTasksButton, new Point(121, 27));

            // Last action on Row was not recorded because the control does not have any good identification property.

            // Last action on Row was not recorded because the control does not have any good identification property.

            // Last action on Row was not recorded because the control does not have any good identification property.

            // Last action on Row was not recorded because the control does not have any good identification property.

            // Click 'PART_Close' button
            Mouse.Click(uIPART_CloseButton9, new Point(20, 18));

            // Click 'Manage Sessions' button
            Mouse.Click(uIManageSessionsButton, new Point(183, 28));

            // Last action on Row was not recorded because the control does not have any good identification property.

            // Last action on Row was not recorded because the control does not have any good identification property.

            // Click 'Add' button
            Mouse.Click(uIAddButton, new Point(134, 11));

            // Click 'M34,52H31V38.5C29.66,39.9 28.16,40.78 26.34,41.45V...' button
            Mouse.Click(uIM3452H31V385C2966399Button, new Point(11, 8));

            // Select '22-Jan-2019' in 'PART_Calendar' calendar
            uIPART_CalendarCalendar.SelectedDatesAsString = this.CMSClientTestParams.UIPART_CalendarCalendarSelectedDatesAsString;

            // Click 'Add Session' window
            Mouse.Click(uIAddSessionWindow, new Point(575, 124));

            // Click 'M34,52H31V38.5C29.66,39.9 28.16,40.78 26.34,41.45V...' button
            Mouse.Click(uIM3452H31V385C2966399Button1, new Point(10, 3));

            // Select '22-Jan-2019' in 'PART_Calendar' calendar
            uIPART_CalendarCalendar1.SelectedDatesAsString = this.CMSClientTestParams.UIPART_CalendarCalendar1SelectedDatesAsString;

            // Select '1' in 'PART_HourPicker' combo box
            uIPART_HourPickerComboBox.SelectedItem = this.CMSClientTestParams.UIPART_HourPickerComboBoxSelectedItem;

            // Click 'Add Session' window
            Mouse.Click(uIAddSessionWindow, new Point(556, 47));

            // Type 'chair1' in 'ChairmanBox' text box
            uIChairmanBoxEdit.Text = this.CMSClientTestParams.UIChairmanBoxEditText;

            // Last action on list item was not recorded because the control does not have any good identification property.

            // Clear 'Special session' check box
            uISpecialsessionCheckBox.Checked = this.CMSClientTestParams.UISpecialsessionCheckBoxChecked;

            // Click 'Cancel' button
            Mouse.Click(uICancelButton4, new Point(46, 9));

            // Click 'PART_Close' button
            Mouse.Click(uIPART_CloseButton10, new Point(12, 17));

            // Click 'Manage Emergency' button
            Mouse.Click(uIManageEmergencyButton, new Point(219, 30));

            // Click 'PART_Close' button
            Mouse.Click(uIPART_CloseButton11, new Point(25, 10));

            // Click 'Manage Accommodation' button
            Mouse.Click(uIManageAccommodationButton, new Point(204, 26));

            // Last action on Row was not recorded because the control does not have any good identification property.

            // Click 'PART_Close' button
            Mouse.Click(uIPART_CloseButton12, new Point(6, 16));

            // Click 'Manage Travel' button
            Mouse.Click(uIManageTravelButton, new Point(196, 24));

            // Last action on Row was not recorded because the control does not have any good identification property.

            // Click 'PART_Close' button
            Mouse.Click(uIPART_CloseButton13, new Point(15, 18));

            // Click 'Manage Welcome Pack' button
            Mouse.Click(uIManageWelcomePackButton, new Point(170, 34));

            // Last action on Row was not recorded because the control does not have any good identification property.

            // Click 'PART_Close' button
            Mouse.Click(uIPART_CloseButton14, new Point(3, 5));

            // Click 'logout' button
            Mouse.Click(uILogoutButton, new Point(20, 15));

            // Type 'author1' in 'LoginBox' text box
            uILoginBoxEdit.Text = this.CMSClientTestParams.UILoginBoxEditText5;

            // Click 'PasswordBox' text box
            Mouse.Click(uIPasswordBoxEdit, new Point(58, 16));

            // Type '********' in 'PasswordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.CMSClientTestParams.UIPasswordBoxEditSendKeys3, true);

            // Click 'Log In' button
            Mouse.Click(uILogInButton, new Point(29, 10));

            // Select 'CMS.BE.DTO.ConferenceDTO' in 'ConferenceList' list box
            uIConferenceListList.SelectedItemsAsString = this.CMSClientTestParams.UIConferenceListListSelectedItemsAsString2;

            // Click 'Author Panel' button
            Mouse.Click(uIAuthorPanelButton, new Point(79, 29));

            // Last action on Row was not recorded because the control does not have any good identification property.

            // Click 'Add' button
            Mouse.Click(uIAddButton1, new Point(54, 13));

            // Select 'SpecialSession' check box
            uISpecialSessionCheckBox1.Checked = this.CMSClientTestParams.UISpecialSessionCheckBoxChecked1;

            // Select 'CMS.BE.DTO.SpecialSessionDTO' in 'SSList' combo box
            uISSListComboBox.SelectedItem = this.CMSClientTestParams.UISSListComboBoxSelectedItem;

            // Click 'Cancel' button
            Mouse.Click(uICancelButton5, new Point(52, 22));

            // Click 'logout' button
            Mouse.Click(uILogoutButton1, new Point(13, 22));

            // Type 'reviewer1' in 'LoginBox' text box
            uILoginBoxEdit.Text = this.CMSClientTestParams.UILoginBoxEditText6;

            // Click 'PasswordBox' text box
            Mouse.Click(uIPasswordBoxEdit, new Point(88, 12));

            // Type '********' in 'PasswordBox' text box
            Keyboard.SendKeys(uIPasswordBoxEdit, this.CMSClientTestParams.UIPasswordBoxEditSendKeys4, true);

            // Click 'Log In' button
            Mouse.Click(uILogInButton, new Point(48, 14));

            // Select 'CMS.BE.DTO.ConferenceDTO' in 'ConferenceList' list box
            uIConferenceListList.SelectedItemsAsString = this.CMSClientTestParams.UIConferenceListListSelectedItemsAsString3;

            // Click 'Manager Panel' button
            Mouse.Click(uIManagerPanelButton, new Point(80, 23));

            // Click 'ReviewArticles' button
            Mouse.Click(uIReviewArticlesButton, new Point(67, 18));

            // Last action on list item was not recorded because the control does not have any good identification property.

            // Click 'My Reviews' button
            Mouse.Click(uIMyReviewsButton, new Point(43, 15));

            // Last action on Row was not recorded because the control does not have any good identification property.

            // Click 'PART_Close' button
            Mouse.Click(uIPART_CloseButton15, new Point(15, 17));

            // Click 'PART_Close' button
            Mouse.Click(uIPART_CloseButton16, new Point(10, 19));

            // Click 'logout' button
            Mouse.Click(uILogoutButton, new Point(29, 15));
        }
        
        #region Properties
        public virtual LoginRecordedParams LoginRecordedParams
        {
            get
            {
                if ((this.mLoginRecordedParams == null))
                {
                    this.mLoginRecordedParams = new LoginRecordedParams();
                }
                return this.mLoginRecordedParams;
            }
        }
        
        public virtual UserPanelAssertExpectedValues UserPanelAssertExpectedValues
        {
            get
            {
                if ((this.mUserPanelAssertExpectedValues == null))
                {
                    this.mUserPanelAssertExpectedValues = new UserPanelAssertExpectedValues();
                }
                return this.mUserPanelAssertExpectedValues;
            }
        }
        
        public virtual LoginOldCredentialsRecordedParams LoginOldCredentialsRecordedParams
        {
            get
            {
                if ((this.mLoginOldCredentialsRecordedParams == null))
                {
                    this.mLoginOldCredentialsRecordedParams = new LoginOldCredentialsRecordedParams();
                }
                return this.mLoginOldCredentialsRecordedParams;
            }
        }
        
        public virtual LoginFailedAssertExpectedValues LoginFailedAssertExpectedValues
        {
            get
            {
                if ((this.mLoginFailedAssertExpectedValues == null))
                {
                    this.mLoginFailedAssertExpectedValues = new LoginFailedAssertExpectedValues();
                }
                return this.mLoginFailedAssertExpectedValues;
            }
        }
        
        public virtual LoginWithChangedPassRecordedParams LoginWithChangedPassRecordedParams
        {
            get
            {
                if ((this.mLoginWithChangedPassRecordedParams == null))
                {
                    this.mLoginWithChangedPassRecordedParams = new LoginWithChangedPassRecordedParams();
                }
                return this.mLoginWithChangedPassRecordedParams;
            }
        }
        
        public virtual UserNameAssertExpectedValues UserNameAssertExpectedValues
        {
            get
            {
                if ((this.mUserNameAssertExpectedValues == null))
                {
                    this.mUserNameAssertExpectedValues = new UserNameAssertExpectedValues();
                }
                return this.mUserNameAssertExpectedValues;
            }
        }
        
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual CMSClientTestParams CMSClientTestParams
        {
            get
            {
                if ((this.mCMSClientTestParams == null))
                {
                    this.mCMSClientTestParams = new CMSClientTestParams();
                }
                return this.mCMSClientTestParams;
            }
        }
        
        public UICMSLogInWindow UICMSLogInWindow
        {
            get
            {
                if ((this.mUICMSLogInWindow == null))
                {
                    this.mUICMSLogInWindow = new UICMSLogInWindow();
                }
                return this.mUICMSLogInWindow;
            }
        }
        
        public UIUserPanelWindow UIUserPanelWindow
        {
            get
            {
                if ((this.mUIUserPanelWindow == null))
                {
                    this.mUIUserPanelWindow = new UIUserPanelWindow();
                }
                return this.mUIUserPanelWindow;
            }
        }
        
        public UIChangePasswordWindow UIChangePasswordWindow
        {
            get
            {
                if ((this.mUIChangePasswordWindow == null))
                {
                    this.mUIChangePasswordWindow = new UIChangePasswordWindow();
                }
                return this.mUIChangePasswordWindow;
            }
        }
        
        public UIConferenceHomeWindow UIConferenceHomeWindow
        {
            get
            {
                if ((this.mUIConferenceHomeWindow == null))
                {
                    this.mUIConferenceHomeWindow = new UIConferenceHomeWindow();
                }
                return this.mUIConferenceHomeWindow;
            }
        }
        
        public UISessionDetailsWindow UISessionDetailsWindow
        {
            get
            {
                if ((this.mUISessionDetailsWindow == null))
                {
                    this.mUISessionDetailsWindow = new UISessionDetailsWindow();
                }
                return this.mUISessionDetailsWindow;
            }
        }
        
        public UISpecialsessiondetailWindow UISpecialsessiondetailWindow
        {
            get
            {
                if ((this.mUISpecialsessiondetailWindow == null))
                {
                    this.mUISpecialsessiondetailWindow = new UISpecialsessiondetailWindow();
                }
                return this.mUISpecialsessiondetailWindow;
            }
        }
        
        public UIEventDetailsWindow UIEventDetailsWindow
        {
            get
            {
                if ((this.mUIEventDetailsWindow == null))
                {
                    this.mUIEventDetailsWindow = new UIEventDetailsWindow();
                }
                return this.mUIEventDetailsWindow;
            }
        }
        
        public UIChangePasswordWindow1 UIChangePasswordWindow1
        {
            get
            {
                if ((this.mUIChangePasswordWindow1 == null))
                {
                    this.mUIChangePasswordWindow1 = new UIChangePasswordWindow1();
                }
                return this.mUIChangePasswordWindow1;
            }
        }
        
        public UIAccommodationOptionsWindow UIAccommodationOptionsWindow
        {
            get
            {
                if ((this.mUIAccommodationOptionsWindow == null))
                {
                    this.mUIAccommodationOptionsWindow = new UIAccommodationOptionsWindow();
                }
                return this.mUIAccommodationOptionsWindow;
            }
        }
        
        public UITravelInfoWindow UITravelInfoWindow
        {
            get
            {
                if ((this.mUITravelInfoWindow == null))
                {
                    this.mUITravelInfoWindow = new UITravelInfoWindow();
                }
                return this.mUITravelInfoWindow;
            }
        }
        
        public UIEmergencyInfoWindow UIEmergencyInfoWindow
        {
            get
            {
                if ((this.mUIEmergencyInfoWindow == null))
                {
                    this.mUIEmergencyInfoWindow = new UIEmergencyInfoWindow();
                }
                return this.mUIEmergencyInfoWindow;
            }
        }
        
        public UIManagerPanelWindow UIManagerPanelWindow
        {
            get
            {
                if ((this.mUIManagerPanelWindow == null))
                {
                    this.mUIManagerPanelWindow = new UIManagerPanelWindow();
                }
                return this.mUIManagerPanelWindow;
            }
        }
        
        public UIManageAccountWindow UIManageAccountWindow
        {
            get
            {
                if ((this.mUIManageAccountWindow == null))
                {
                    this.mUIManageAccountWindow = new UIManageAccountWindow();
                }
                return this.mUIManageAccountWindow;
            }
        }
        
        public UIAddAccountWindow UIAddAccountWindow
        {
            get
            {
                if ((this.mUIAddAccountWindow == null))
                {
                    this.mUIAddAccountWindow = new UIAddAccountWindow();
                }
                return this.mUIAddAccountWindow;
            }
        }
        
        public UIEditAccountWindow UIEditAccountWindow
        {
            get
            {
                if ((this.mUIEditAccountWindow == null))
                {
                    this.mUIEditAccountWindow = new UIEditAccountWindow();
                }
                return this.mUIEditAccountWindow;
            }
        }
        
        public UIManageAuthorWindow UIManageAuthorWindow
        {
            get
            {
                if ((this.mUIManageAuthorWindow == null))
                {
                    this.mUIManageAuthorWindow = new UIManageAuthorWindow();
                }
                return this.mUIManageAuthorWindow;
            }
        }
        
        public UIEditAuthorWindow UIEditAuthorWindow
        {
            get
            {
                if ((this.mUIEditAuthorWindow == null))
                {
                    this.mUIEditAuthorWindow = new UIEditAuthorWindow();
                }
                return this.mUIEditAuthorWindow;
            }
        }
        
        public UIManageEventsWindow UIManageEventsWindow
        {
            get
            {
                if ((this.mUIManageEventsWindow == null))
                {
                    this.mUIManageEventsWindow = new UIManageEventsWindow();
                }
                return this.mUIManageEventsWindow;
            }
        }
        
        public UIManageAwardsWindow UIManageAwardsWindow
        {
            get
            {
                if ((this.mUIManageAwardsWindow == null))
                {
                    this.mUIManageAwardsWindow = new UIManageAwardsWindow();
                }
                return this.mUIManageAwardsWindow;
            }
        }
        
        public UIManageTasksWindow UIManageTasksWindow
        {
            get
            {
                if ((this.mUIManageTasksWindow == null))
                {
                    this.mUIManageTasksWindow = new UIManageTasksWindow();
                }
                return this.mUIManageTasksWindow;
            }
        }
        
        public UISessionsWindow UISessionsWindow
        {
            get
            {
                if ((this.mUISessionsWindow == null))
                {
                    this.mUISessionsWindow = new UISessionsWindow();
                }
                return this.mUISessionsWindow;
            }
        }
        
        public UIAddSessionWindow UIAddSessionWindow
        {
            get
            {
                if ((this.mUIAddSessionWindow == null))
                {
                    this.mUIAddSessionWindow = new UIAddSessionWindow();
                }
                return this.mUIAddSessionWindow;
            }
        }
        
        public UIEditEmergencyInfoWindow UIEditEmergencyInfoWindow
        {
            get
            {
                if ((this.mUIEditEmergencyInfoWindow == null))
                {
                    this.mUIEditEmergencyInfoWindow = new UIEditEmergencyInfoWindow();
                }
                return this.mUIEditEmergencyInfoWindow;
            }
        }
        
        public UIManageAccommodationOWindow UIManageAccommodationOWindow
        {
            get
            {
                if ((this.mUIManageAccommodationOWindow == null))
                {
                    this.mUIManageAccommodationOWindow = new UIManageAccommodationOWindow();
                }
                return this.mUIManageAccommodationOWindow;
            }
        }
        
        public UIManageTravelOptionsWindow UIManageTravelOptionsWindow
        {
            get
            {
                if ((this.mUIManageTravelOptionsWindow == null))
                {
                    this.mUIManageTravelOptionsWindow = new UIManageTravelOptionsWindow();
                }
                return this.mUIManageTravelOptionsWindow;
            }
        }
        
        public UIGuestsListWindow UIGuestsListWindow
        {
            get
            {
                if ((this.mUIGuestsListWindow == null))
                {
                    this.mUIGuestsListWindow = new UIGuestsListWindow();
                }
                return this.mUIGuestsListWindow;
            }
        }
        
        public UIAuthorPanelWindow UIAuthorPanelWindow
        {
            get
            {
                if ((this.mUIAuthorPanelWindow == null))
                {
                    this.mUIAuthorPanelWindow = new UIAuthorPanelWindow();
                }
                return this.mUIAuthorPanelWindow;
            }
        }
        
        public UISubmitArticlesWindow UISubmitArticlesWindow
        {
            get
            {
                if ((this.mUISubmitArticlesWindow == null))
                {
                    this.mUISubmitArticlesWindow = new UISubmitArticlesWindow();
                }
                return this.mUISubmitArticlesWindow;
            }
        }
        
        public UIReviewerPanelWindow UIReviewerPanelWindow
        {
            get
            {
                if ((this.mUIReviewerPanelWindow == null))
                {
                    this.mUIReviewerPanelWindow = new UIReviewerPanelWindow();
                }
                return this.mUIReviewerPanelWindow;
            }
        }
        
        public UIMyReviewsWindow UIMyReviewsWindow
        {
            get
            {
                if ((this.mUIMyReviewsWindow == null))
                {
                    this.mUIMyReviewsWindow = new UIMyReviewsWindow();
                }
                return this.mUIMyReviewsWindow;
            }
        }
        #endregion
        
        #region Fields
        private LoginRecordedParams mLoginRecordedParams;
        
        private UserPanelAssertExpectedValues mUserPanelAssertExpectedValues;
        
        private LoginOldCredentialsRecordedParams mLoginOldCredentialsRecordedParams;
        
        private LoginFailedAssertExpectedValues mLoginFailedAssertExpectedValues;
        
        private LoginWithChangedPassRecordedParams mLoginWithChangedPassRecordedParams;
        
        private UserNameAssertExpectedValues mUserNameAssertExpectedValues;
        
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private CMSClientTestParams mCMSClientTestParams;
        
        private UICMSLogInWindow mUICMSLogInWindow;
        
        private UIUserPanelWindow mUIUserPanelWindow;
        
        private UIChangePasswordWindow mUIChangePasswordWindow;
        
        private UIConferenceHomeWindow mUIConferenceHomeWindow;
        
        private UISessionDetailsWindow mUISessionDetailsWindow;
        
        private UISpecialsessiondetailWindow mUISpecialsessiondetailWindow;
        
        private UIEventDetailsWindow mUIEventDetailsWindow;
        
        private UIChangePasswordWindow1 mUIChangePasswordWindow1;
        
        private UIAccommodationOptionsWindow mUIAccommodationOptionsWindow;
        
        private UITravelInfoWindow mUITravelInfoWindow;
        
        private UIEmergencyInfoWindow mUIEmergencyInfoWindow;
        
        private UIManagerPanelWindow mUIManagerPanelWindow;
        
        private UIManageAccountWindow mUIManageAccountWindow;
        
        private UIAddAccountWindow mUIAddAccountWindow;
        
        private UIEditAccountWindow mUIEditAccountWindow;
        
        private UIManageAuthorWindow mUIManageAuthorWindow;
        
        private UIEditAuthorWindow mUIEditAuthorWindow;
        
        private UIManageEventsWindow mUIManageEventsWindow;
        
        private UIManageAwardsWindow mUIManageAwardsWindow;
        
        private UIManageTasksWindow mUIManageTasksWindow;
        
        private UISessionsWindow mUISessionsWindow;
        
        private UIAddSessionWindow mUIAddSessionWindow;
        
        private UIEditEmergencyInfoWindow mUIEditEmergencyInfoWindow;
        
        private UIManageAccommodationOWindow mUIManageAccommodationOWindow;
        
        private UIManageTravelOptionsWindow mUIManageTravelOptionsWindow;
        
        private UIGuestsListWindow mUIGuestsListWindow;
        
        private UIAuthorPanelWindow mUIAuthorPanelWindow;
        
        private UISubmitArticlesWindow mUISubmitArticlesWindow;
        
        private UIReviewerPanelWindow mUIReviewerPanelWindow;
        
        private UIMyReviewsWindow mUIMyReviewsWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LoginRecorded'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class LoginRecordedParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'testlogin' in 'LoginBox' text box
        /// </summary>
        public string UILoginBoxEditText = "testlogin";
        
        /// <summary>
        /// Type '********' in 'PasswordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "HFCrg7XTcyAqEVXSgwpGDHoWyQ3GnCv8K0eVHC61t4M=";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'UserPanelAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UserPanelAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'USER PANEL' label equals 'Text'
        /// </summary>
        public string UIUSERPANELTextControlType = "Text";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LoginOldCredentialsRecorded'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class LoginOldCredentialsRecordedParams
    {
        
        #region Fields
        /// <summary>
        /// Type '********' in 'OldPassBox' text box
        /// </summary>
        public string UIOldPassBoxEditSendKeys = "HFCrg7XTcyCouy2pzKk92e0sE0g7U6rd";
        
        /// <summary>
        /// Type '********' in 'NewPasswordBox' text box
        /// </summary>
        public string UINewPasswordBoxEditSendKeys = "uf4zKmtDVfNGXGJ7ppoOPc5C/wY9wsus";
        
        /// <summary>
        /// Type '********' in 'ConfNewPasswordBox' text box
        /// </summary>
        public string UIConfNewPasswordBoxEditSendKeys = "uf4zKmtDVfNGXGJ7ppoOPc5C/wY9wsus";
        
        /// <summary>
        /// Type 'testlogin' in 'LoginBox' text box
        /// </summary>
        public string UILoginBoxEditText = "testlogin";
        
        /// <summary>
        /// Type '********' in 'PasswordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "uf4zKmtDVfPCDXLzGXdcGRUXJ0bmYUuFXk+DpBi5G160qW5f9Nzx/g7yEdX09sIjyn+NrKTlOfIdtCf1e" +
            "JqmGhIUow47moZaFCGTDpHjU8F5SKzYJ0kJqKTlVyOpWBWnZxPkU9q2en2ZQOEsYnMC+/xqe9GXhbg8D" +
            "HorVwYFRQij8tQdiLrwKMhL4/wG0+LF";
        
        /// <summary>
        /// Type '********' in 'PasswordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys1 = "7FdySo24X7mXzc/OrAqorg==";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LoginFailedAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class LoginFailedAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'Login Failed!' label equals 'Text'
        /// </summary>
        public string UILoginFailedText1ControlType = "Text";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'LoginWithChangedPassRecorded'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class LoginWithChangedPassRecordedParams
    {
        
        #region Fields
        /// <summary>
        /// Type '********' in 'PasswordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "uf4zKmtDVfNGXGJ7ppoOPc5C/wY9wsus";
        
        /// <summary>
        /// Type '********' in 'OldPassBox' text box
        /// </summary>
        public string UIOldPassBoxEditSendKeys = "uf4zKmtDVfNGXGJ7ppoOPc5C/wY9wsus";
        
        /// <summary>
        /// Type '********' in 'NewPasswordBox' text box
        /// </summary>
        public string UINewPasswordBoxEditSendKeys = "HFCrg7XTcyCouy2pzKk92e0sE0g7U6rd";
        
        /// <summary>
        /// Type '********' in 'ConfNewPasswordBox' text box
        /// </summary>
        public string UIConfNewPasswordBoxEditSendKeys = "HFCrg7XTcyCouy2pzKk92e0sE0g7U6rd";
        
        /// <summary>
        /// Type 'testlogin' in 'LoginBox' text box
        /// </summary>
        public string UILoginBoxEditText = "testlogin";
        
        /// <summary>
        /// Type '********' in 'PasswordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys1 = "HFCrg7XTcyCouy2pzKk92e0sE0g7U6rd";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'UserNameAssert'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UserNameAssertExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'ControlType' property of 'testlogin' label equals 'Text'
        /// </summary>
        public string UITestloginText1ControlType = "Text";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'manager' in 'LoginBox' text box
        /// </summary>
        public string UILoginBoxEditText = "manager";
        
        /// <summary>
        /// Type '********' in 'PasswordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "RfNYaHHO2oBt1DzyhQ7ZmxV8QUYuKSR0";
        
        /// <summary>
        /// Select 'CMS.BE.DTO.ConferenceDTO' in 'ConferenceList' list box
        /// </summary>
        public string UIConferenceListListSelectedItemsAsString = "CMS.BE.DTO.ConferenceDTO";
        
        /// <summary>
        /// Select 'CMS.BE.DTO.SessionDTO' in 'SessionList' list box
        /// </summary>
        public string UISessionListListSelectedItemsAsString = "CMS.BE.DTO.SessionDTO";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'CMSClientTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class CMSClientTestParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'manager' in 'LoginBox' text box
        /// </summary>
        public string UILoginBoxEditText = "manager";
        
        /// <summary>
        /// Type '********' in 'PasswordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys = "RfNYaHHO2oBt1DzyhQ7ZmxV8QUYuKSR0";
        
        /// <summary>
        /// Type '********' in 'OldPassBox' text box
        /// </summary>
        public string UIOldPassBoxEditSendKeys = "RfNYaHHO2oBt1DzyhQ7ZmxV8QUYuKSR0";
        
        /// <summary>
        /// Type '********' in 'NewPasswordBox' text box
        /// </summary>
        public string UINewPasswordBoxEditSendKeys = "tJZ/sPY8jn+2DcN2HrNFxnV2B+6U4voq";
        
        /// <summary>
        /// Type '********' in 'ConfNewPasswordBox' text box
        /// </summary>
        public string UIConfNewPasswordBoxEditSendKeys = "tJZ/sPY8jn+2DcN2HrNFxnV2B+6U4voq";
        
        /// <summary>
        /// Type 'manager' in 'LoginBox' text box
        /// </summary>
        public string UILoginBoxEditText1 = "manager";
        
        /// <summary>
        /// Type '********' in 'PasswordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys1 = "tJZ/sPY8jn+2DcN2HrNFxnV2B+6U4voq";
        
        /// <summary>
        /// Type '********' in 'OldPassBox' text box
        /// </summary>
        public string UIOldPassBoxEditSendKeys1 = "tJZ/sPY8jn+2DcN2HrNFxnV2B+6U4voq";
        
        /// <summary>
        /// Type '********' in 'NewPasswordBox' text box
        /// </summary>
        public string UINewPasswordBoxEditSendKeys1 = "RfNYaHHO2oBt1DzyhQ7ZmxV8QUYuKSR0";
        
        /// <summary>
        /// Type '********' in 'ConfNewPasswordBox' text box
        /// </summary>
        public string UIConfNewPasswordBoxEditSendKeys1 = "RfNYaHHO2oBt1DzyhQ7ZmxV8QUYuKSR0";
        
        /// <summary>
        /// Type 'manager' in 'LoginBox' text box
        /// </summary>
        public string UILoginBoxEditText2 = "manager";
        
        /// <summary>
        /// Type '********' in 'PasswordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys2 = "RfNYaHHO2oBt1DzyhQ7ZmxV8QUYuKSR0";
        
        /// <summary>
        /// Select 'CMS.BE.DTO.ConferenceDTO' in 'ConferenceList' list box
        /// </summary>
        public string UIConferenceListListSelectedItemsAsString = "CMS.BE.DTO.ConferenceDTO";
        
        /// <summary>
        /// Select 'CMS.BE.DTO.ConferenceDTO' in 'ConferenceList' list box
        /// </summary>
        public string UIConferenceListListSelectedItemsAsString1 = "CMS.BE.DTO.ConferenceDTO";
        
        /// <summary>
        /// Type 'testlogin' in 'LoginBox' text box
        /// </summary>
        public string UILoginBoxEditText3 = "testlogin";
        
        /// <summary>
        /// Type 'guest' in 'LoginBox' text box
        /// </summary>
        public string UILoginBoxEditText4 = "guest";
        
        /// <summary>
        /// Type 'author1' in 'AuthorBox' text box
        /// </summary>
        public string UIAuthorBoxEditText = "author1";
        
        /// <summary>
        /// Select 'CMS.BE.DTO.SessionDTO' in 'SessionList' list box
        /// </summary>
        public string UISessionListListSelectedItemsAsString = "CMS.BE.DTO.SessionDTO";
        
        /// <summary>
        /// Select 'SpecialSession' in 'SessionComboBox' combo box
        /// </summary>
        public string UISessionComboBoxComboBoxSelectedItem = "SpecialSession";
        
        /// <summary>
        /// Select 'CMS.BE.DTO.SpecialSessionDTO' in 'SessionList' list box
        /// </summary>
        public string UISessionListListSelectedItemsAsString1 = "CMS.BE.DTO.SpecialSessionDTO";
        
        /// <summary>
        /// Select '22-Jan-2019' in 'PART_Calendar' calendar
        /// </summary>
        public string UIPART_CalendarCalendarSelectedDatesAsString = "22-Jan-2019";
        
        /// <summary>
        /// Select '22-Jan-2019' in 'PART_Calendar' calendar
        /// </summary>
        public string UIPART_CalendarCalendar1SelectedDatesAsString = "22-Jan-2019";
        
        /// <summary>
        /// Select '1' in 'PART_HourPicker' combo box
        /// </summary>
        public string UIPART_HourPickerComboBoxSelectedItem = "1";
        
        /// <summary>
        /// Type 'chair1' in 'ChairmanBox' text box
        /// </summary>
        public string UIChairmanBoxEditText = "chair1";
        
        /// <summary>
        /// Clear 'Special session' check box
        /// </summary>
        public bool UISpecialsessionCheckBoxChecked = false;
        
        /// <summary>
        /// Type 'author1' in 'LoginBox' text box
        /// </summary>
        public string UILoginBoxEditText5 = "author1";
        
        /// <summary>
        /// Type '********' in 'PasswordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys3 = "RfNYaHHO2oBt1DzyhQ7ZmxV8QUYuKSR0";
        
        /// <summary>
        /// Select 'CMS.BE.DTO.ConferenceDTO' in 'ConferenceList' list box
        /// </summary>
        public string UIConferenceListListSelectedItemsAsString2 = "CMS.BE.DTO.ConferenceDTO";
        
        /// <summary>
        /// Select 'SpecialSession' check box
        /// </summary>
        public bool UISpecialSessionCheckBoxChecked1 = true;
        
        /// <summary>
        /// Select 'CMS.BE.DTO.SpecialSessionDTO' in 'SSList' combo box
        /// </summary>
        public string UISSListComboBoxSelectedItem = "CMS.BE.DTO.SpecialSessionDTO";
        
        /// <summary>
        /// Type 'reviewer1' in 'LoginBox' text box
        /// </summary>
        public string UILoginBoxEditText6 = "reviewer1";
        
        /// <summary>
        /// Type '********' in 'PasswordBox' text box
        /// </summary>
        public string UIPasswordBoxEditSendKeys4 = "RfNYaHHO2oBt1DzyhQ7ZmxV8QUYuKSR0";
        
        /// <summary>
        /// Select 'CMS.BE.DTO.ConferenceDTO' in 'ConferenceList' list box
        /// </summary>
        public string UIConferenceListListSelectedItemsAsString3 = "CMS.BE.DTO.ConferenceDTO";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICMSLogInWindow : WpfWindow
    {
        
        public UICMSLogInWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "CMS Log In";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("CMS Log In");
            #endregion
        }
        
        #region Properties
        public WpfEdit UILoginBoxEdit
        {
            get
            {
                if ((this.mUILoginBoxEdit == null))
                {
                    this.mUILoginBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUILoginBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "LoginBox";
                    this.mUILoginBoxEdit.WindowTitles.Add("CMS Log In");
                    #endregion
                }
                return this.mUILoginBoxEdit;
            }
        }
        
        public WpfEdit UIPasswordBoxEdit
        {
            get
            {
                if ((this.mUIPasswordBoxEdit == null))
                {
                    this.mUIPasswordBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIPasswordBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "PasswordBox";
                    this.mUIPasswordBoxEdit.WindowTitles.Add("CMS Log In");
                    #endregion
                }
                return this.mUIPasswordBoxEdit;
            }
        }
        
        public WpfButton UILogInButton
        {
            get
            {
                if ((this.mUILogInButton == null))
                {
                    this.mUILogInButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUILogInButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "LogInButton";
                    this.mUILogInButton.WindowTitles.Add("CMS Log In");
                    #endregion
                }
                return this.mUILogInButton;
            }
        }
        
        public UILoginFailedText UILoginFailedText
        {
            get
            {
                if ((this.mUILoginFailedText == null))
                {
                    this.mUILoginFailedText = new UILoginFailedText(this);
                }
                return this.mUILoginFailedText;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUILoginBoxEdit;
        
        private WpfEdit mUIPasswordBoxEdit;
        
        private WpfButton mUILogInButton;
        
        private UILoginFailedText mUILoginFailedText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILoginFailedText : WpfText
    {
        
        public UILoginFailedText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "LoginFailed";
            this.WindowTitles.Add("CMS Log In");
            #endregion
        }
        
        #region Properties
        public WpfText UILoginFailedText1
        {
            get
            {
                if ((this.mUILoginFailedText1 == null))
                {
                    this.mUILoginFailedText1 = new WpfText(this);
                    #region Search Criteria
                    this.mUILoginFailedText1.SearchProperties[WpfText.PropertyNames.Name] = "Login Failed!";
                    this.mUILoginFailedText1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUILoginFailedText1.WindowTitles.Add("CMS Log In");
                    #endregion
                }
                return this.mUILoginFailedText1;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUILoginFailedText1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUserPanelWindow : WpfWindow
    {
        
        public UIUserPanelWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "User Panel";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("User Panel");
            #endregion
        }
        
        #region Properties
        public UIUserPanelCustom UIUserPanelCustom
        {
            get
            {
                if ((this.mUIUserPanelCustom == null))
                {
                    this.mUIUserPanelCustom = new UIUserPanelCustom(this);
                }
                return this.mUIUserPanelCustom;
            }
        }
        
        public WpfButton UIChangePasswordButton
        {
            get
            {
                if ((this.mUIChangePasswordButton == null))
                {
                    this.mUIChangePasswordButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIChangePasswordButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ChangePasswordButton";
                    this.mUIChangePasswordButton.WindowTitles.Add("User Panel");
                    #endregion
                }
                return this.mUIChangePasswordButton;
            }
        }
        
        public UITestloginText UITestloginText
        {
            get
            {
                if ((this.mUITestloginText == null))
                {
                    this.mUITestloginText = new UITestloginText(this);
                }
                return this.mUITestloginText;
            }
        }
        
        public WpfList UIConferenceListList
        {
            get
            {
                if ((this.mUIConferenceListList == null))
                {
                    this.mUIConferenceListList = new WpfList(this);
                    #region Search Criteria
                    this.mUIConferenceListList.SearchProperties[WpfList.PropertyNames.AutomationId] = "ConferenceList";
                    this.mUIConferenceListList.WindowTitles.Add("User Panel");
                    #endregion
                }
                return this.mUIConferenceListList;
            }
        }
        
        public WpfButton UIGoToConferenceButton
        {
            get
            {
                if ((this.mUIGoToConferenceButton == null))
                {
                    this.mUIGoToConferenceButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIGoToConferenceButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "GoToConferenceButton";
                    this.mUIGoToConferenceButton.WindowTitles.Add("User Panel");
                    #endregion
                }
                return this.mUIGoToConferenceButton;
            }
        }
        
        public WpfButton UIManagerPanelButton
        {
            get
            {
                if ((this.mUIManagerPanelButton == null))
                {
                    this.mUIManagerPanelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIManagerPanelButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "GoToManagerPanelButton";
                    this.mUIManagerPanelButton.WindowTitles.Add("User Panel");
                    #endregion
                }
                return this.mUIManagerPanelButton;
            }
        }
        
        public WpfButton UIAuthorPanelButton
        {
            get
            {
                if ((this.mUIAuthorPanelButton == null))
                {
                    this.mUIAuthorPanelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIAuthorPanelButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "GoToAuthorPanelButton";
                    this.mUIAuthorPanelButton.WindowTitles.Add("User Panel");
                    #endregion
                }
                return this.mUIAuthorPanelButton;
            }
        }
        #endregion
        
        #region Fields
        private UIUserPanelCustom mUIUserPanelCustom;
        
        private WpfButton mUIChangePasswordButton;
        
        private UITestloginText mUITestloginText;
        
        private WpfList mUIConferenceListList;
        
        private WpfButton mUIGoToConferenceButton;
        
        private WpfButton mUIManagerPanelButton;
        
        private WpfButton mUIAuthorPanelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUserPanelCustom : WpfCustom
    {
        
        public UIUserPanelCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.MetroThumbContentControl";
            this.SearchProperties[WpfControl.PropertyNames.AutomationId] = "PART_TitleBar";
            this.WindowTitles.Add("User Panel");
            #endregion
        }
        
        #region Properties
        public WpfText UIUSERPANELText
        {
            get
            {
                if ((this.mUIUSERPANELText == null))
                {
                    this.mUIUSERPANELText = new WpfText(this);
                    #region Search Criteria
                    this.mUIUSERPANELText.SearchProperties[WpfText.PropertyNames.Name] = "USER PANEL";
                    this.mUIUSERPANELText.WindowTitles.Add("User Panel");
                    #endregion
                }
                return this.mUIUSERPANELText;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIUSERPANELText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITestloginText : WpfText
    {
        
        public UITestloginText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "UserLabel";
            this.WindowTitles.Add("User Panel");
            #endregion
        }
        
        #region Properties
        public WpfText UITestloginText1
        {
            get
            {
                if ((this.mUITestloginText1 == null))
                {
                    this.mUITestloginText1 = new WpfText(this);
                    #region Search Criteria
                    this.mUITestloginText1.SearchProperties[WpfText.PropertyNames.Name] = "testlogin";
                    this.mUITestloginText1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUITestloginText1.WindowTitles.Add("User Panel");
                    #endregion
                }
                return this.mUITestloginText1;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUITestloginText1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIChangePasswordWindow : WpfWindow
    {
        
        public UIChangePasswordWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "ChangePassword";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("ChangePassword");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIOldPassBoxEdit
        {
            get
            {
                if ((this.mUIOldPassBoxEdit == null))
                {
                    this.mUIOldPassBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIOldPassBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "OldPassBox";
                    this.mUIOldPassBoxEdit.WindowTitles.Add("ChangePassword");
                    #endregion
                }
                return this.mUIOldPassBoxEdit;
            }
        }
        
        public WpfEdit UINewPasswordBoxEdit
        {
            get
            {
                if ((this.mUINewPasswordBoxEdit == null))
                {
                    this.mUINewPasswordBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUINewPasswordBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "NewPasswordBox";
                    this.mUINewPasswordBoxEdit.WindowTitles.Add("ChangePassword");
                    #endregion
                }
                return this.mUINewPasswordBoxEdit;
            }
        }
        
        public WpfEdit UIConfNewPasswordBoxEdit
        {
            get
            {
                if ((this.mUIConfNewPasswordBoxEdit == null))
                {
                    this.mUIConfNewPasswordBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIConfNewPasswordBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "ConfNewPasswordBox";
                    this.mUIConfNewPasswordBoxEdit.WindowTitles.Add("ChangePassword");
                    #endregion
                }
                return this.mUIConfNewPasswordBoxEdit;
            }
        }
        
        public WpfButton UIChangepasswordButton
        {
            get
            {
                if ((this.mUIChangepasswordButton == null))
                {
                    this.mUIChangepasswordButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIChangepasswordButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ChangePassButton";
                    this.mUIChangepasswordButton.WindowTitles.Add("ChangePassword");
                    #endregion
                }
                return this.mUIChangepasswordButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIOldPassBoxEdit;
        
        private WpfEdit mUINewPasswordBoxEdit;
        
        private WpfEdit mUIConfNewPasswordBoxEdit;
        
        private WpfButton mUIChangepasswordButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIConferenceHomeWindow : WpfWindow
    {
        
        public UIConferenceHomeWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Conference Home";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Conference Home");
            #endregion
        }
        
        #region Properties
        public UISessionListList UISessionListList
        {
            get
            {
                if ((this.mUISessionListList == null))
                {
                    this.mUISessionListList = new UISessionListList(this);
                }
                return this.mUISessionListList;
            }
        }
        
        public UISpecialSessionListList UISpecialSessionListList
        {
            get
            {
                if ((this.mUISpecialSessionListList == null))
                {
                    this.mUISpecialSessionListList = new UISpecialSessionListList(this);
                }
                return this.mUISpecialSessionListList;
            }
        }
        
        public WpfButton UIAccomButtonButton
        {
            get
            {
                if ((this.mUIAccomButtonButton == null))
                {
                    this.mUIAccomButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIAccomButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "AccomButton";
                    this.mUIAccomButtonButton.WindowTitles.Add("Conference Home");
                    #endregion
                }
                return this.mUIAccomButtonButton;
            }
        }
        
        public WpfButton UITravelButtonButton
        {
            get
            {
                if ((this.mUITravelButtonButton == null))
                {
                    this.mUITravelButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUITravelButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TravelButton";
                    this.mUITravelButtonButton.WindowTitles.Add("Conference Home");
                    #endregion
                }
                return this.mUITravelButtonButton;
            }
        }
        
        public WpfButton UIEmergButtonButton
        {
            get
            {
                if ((this.mUIEmergButtonButton == null))
                {
                    this.mUIEmergButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIEmergButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "EmergButton";
                    this.mUIEmergButtonButton.WindowTitles.Add("Conference Home");
                    #endregion
                }
                return this.mUIEmergButtonButton;
            }
        }
        
        public WpfButton UIUserPanelButton
        {
            get
            {
                if ((this.mUIUserPanelButton == null))
                {
                    this.mUIUserPanelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIUserPanelButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "GoToUserPanelButton";
                    this.mUIUserPanelButton.WindowTitles.Add("Conference Home");
                    #endregion
                }
                return this.mUIUserPanelButton;
            }
        }
        #endregion
        
        #region Fields
        private UISessionListList mUISessionListList;
        
        private UISpecialSessionListList mUISpecialSessionListList;
        
        private WpfButton mUIAccomButtonButton;
        
        private WpfButton mUITravelButtonButton;
        
        private WpfButton mUIEmergButtonButton;
        
        private WpfButton mUIUserPanelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISessionListList : WpfList
    {
        
        public UISessionListList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "SessionList";
            this.WindowTitles.Add("Conference Home");
            #endregion
        }
        
        #region Properties
        public WpfListItem UICMSBEDTOSessionDTOListItem
        {
            get
            {
                if ((this.mUICMSBEDTOSessionDTOListItem == null))
                {
                    this.mUICMSBEDTOSessionDTOListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUICMSBEDTOSessionDTOListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "CMS.BE.DTO.SessionDTO";
                    this.mUICMSBEDTOSessionDTOListItem.WindowTitles.Add("Conference Home");
                    #endregion
                }
                return this.mUICMSBEDTOSessionDTOListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUICMSBEDTOSessionDTOListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISpecialSessionListList : WpfList
    {
        
        public UISpecialSessionListList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "SpecialSessionList";
            this.WindowTitles.Add("Conference Home");
            #endregion
        }
        
        #region Properties
        public WpfListItem UICMSBEDTOSpecialSessiListItem
        {
            get
            {
                if ((this.mUICMSBEDTOSpecialSessiListItem == null))
                {
                    this.mUICMSBEDTOSpecialSessiListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUICMSBEDTOSpecialSessiListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "CMS.BE.DTO.SpecialSessionDTO";
                    this.mUICMSBEDTOSpecialSessiListItem.WindowTitles.Add("Conference Home");
                    #endregion
                }
                return this.mUICMSBEDTOSpecialSessiListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUICMSBEDTOSpecialSessiListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISessionDetailsWindow : WpfWindow
    {
        
        public UISessionDetailsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Session Details";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Session Details");
            #endregion
        }
        
        #region Properties
        public WpfButton UIPART_CloseButton
        {
            get
            {
                if ((this.mUIPART_CloseButton == null))
                {
                    this.mUIPART_CloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIPART_CloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_Close";
                    this.mUIPART_CloseButton.WindowTitles.Add("Session Details");
                    #endregion
                }
                return this.mUIPART_CloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIPART_CloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISpecialsessiondetailWindow : WpfWindow
    {
        
        public UISpecialsessiondetailWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Special session details";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Special session details");
            #endregion
        }
        
        #region Properties
        public WpfButton UIPART_CloseButton
        {
            get
            {
                if ((this.mUIPART_CloseButton == null))
                {
                    this.mUIPART_CloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIPART_CloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_Close";
                    this.mUIPART_CloseButton.WindowTitles.Add("Special session details");
                    #endregion
                }
                return this.mUIPART_CloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIPART_CloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEventDetailsWindow : WpfWindow
    {
        
        public UIEventDetailsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Event Details";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Event Details");
            #endregion
        }
        
        #region Properties
        public WpfButton UIPART_CloseButton
        {
            get
            {
                if ((this.mUIPART_CloseButton == null))
                {
                    this.mUIPART_CloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIPART_CloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_Close";
                    this.mUIPART_CloseButton.WindowTitles.Add("Event Details");
                    #endregion
                }
                return this.mUIPART_CloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIPART_CloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIChangePasswordWindow1 : WpfWindow
    {
        
        public UIChangePasswordWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Change Password";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Change Password");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIOldPassBoxEdit
        {
            get
            {
                if ((this.mUIOldPassBoxEdit == null))
                {
                    this.mUIOldPassBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIOldPassBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "OldPassBox";
                    this.mUIOldPassBoxEdit.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUIOldPassBoxEdit;
            }
        }
        
        public WpfEdit UINewPasswordBoxEdit
        {
            get
            {
                if ((this.mUINewPasswordBoxEdit == null))
                {
                    this.mUINewPasswordBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUINewPasswordBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "NewPasswordBox";
                    this.mUINewPasswordBoxEdit.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUINewPasswordBoxEdit;
            }
        }
        
        public WpfEdit UIConfNewPasswordBoxEdit
        {
            get
            {
                if ((this.mUIConfNewPasswordBoxEdit == null))
                {
                    this.mUIConfNewPasswordBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIConfNewPasswordBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "ConfNewPasswordBox";
                    this.mUIConfNewPasswordBoxEdit.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUIConfNewPasswordBoxEdit;
            }
        }
        
        public WpfButton UIChangepasswordButton
        {
            get
            {
                if ((this.mUIChangepasswordButton == null))
                {
                    this.mUIChangepasswordButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIChangepasswordButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ChangePassButton";
                    this.mUIChangepasswordButton.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUIChangepasswordButton;
            }
        }
        
        public WpfButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "CancelButton";
                    this.mUICancelButton.WindowTitles.Add("Change Password");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIOldPassBoxEdit;
        
        private WpfEdit mUINewPasswordBoxEdit;
        
        private WpfEdit mUIConfNewPasswordBoxEdit;
        
        private WpfButton mUIChangepasswordButton;
        
        private WpfButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAccommodationOptionsWindow : WpfWindow
    {
        
        public UIAccommodationOptionsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Accommodation Options";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Accommodation Options");
            #endregion
        }
        
        #region Properties
        public WpfButton UINextButton
        {
            get
            {
                if ((this.mUINextButton == null))
                {
                    this.mUINextButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUINextButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "NextButton";
                    this.mUINextButton.WindowTitles.Add("Accommodation Options");
                    #endregion
                }
                return this.mUINextButton;
            }
        }
        
        public WpfButton UIPART_CloseButton
        {
            get
            {
                if ((this.mUIPART_CloseButton == null))
                {
                    this.mUIPART_CloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIPART_CloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_Close";
                    this.mUIPART_CloseButton.WindowTitles.Add("Accommodation Options");
                    #endregion
                }
                return this.mUIPART_CloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUINextButton;
        
        private WpfButton mUIPART_CloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITravelInfoWindow : WpfWindow
    {
        
        public UITravelInfoWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Travel Info";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Travel Info");
            #endregion
        }
        
        #region Properties
        public WpfButton UINextButton
        {
            get
            {
                if ((this.mUINextButton == null))
                {
                    this.mUINextButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUINextButton.SearchProperties[WpfButton.PropertyNames.Name] = "Next";
                    this.mUINextButton.WindowTitles.Add("Travel Info");
                    #endregion
                }
                return this.mUINextButton;
            }
        }
        
        public WpfButton UIPART_CloseButton
        {
            get
            {
                if ((this.mUIPART_CloseButton == null))
                {
                    this.mUIPART_CloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIPART_CloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_Close";
                    this.mUIPART_CloseButton.WindowTitles.Add("Travel Info");
                    #endregion
                }
                return this.mUIPART_CloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUINextButton;
        
        private WpfButton mUIPART_CloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEmergencyInfoWindow : WpfWindow
    {
        
        public UIEmergencyInfoWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Emergency Info";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Emergency Info");
            #endregion
        }
        
        #region Properties
        public WpfButton UIBackButton
        {
            get
            {
                if ((this.mUIBackButton == null))
                {
                    this.mUIBackButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIBackButton.SearchProperties[WpfButton.PropertyNames.Name] = "Back";
                    this.mUIBackButton.WindowTitles.Add("Emergency Info");
                    #endregion
                }
                return this.mUIBackButton;
            }
        }
        
        public WpfButton UIPART_CloseButton
        {
            get
            {
                if ((this.mUIPART_CloseButton == null))
                {
                    this.mUIPART_CloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIPART_CloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_Close";
                    this.mUIPART_CloseButton.WindowTitles.Add("Emergency Info");
                    #endregion
                }
                return this.mUIPART_CloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIBackButton;
        
        private WpfButton mUIPART_CloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIManagerPanelWindow : WpfWindow
    {
        
        public UIManagerPanelWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Manager Panel";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Manager Panel");
            #endregion
        }
        
        #region Properties
        public UISessionListList1 UISessionListList
        {
            get
            {
                if ((this.mUISessionListList == null))
                {
                    this.mUISessionListList = new UISessionListList1(this);
                }
                return this.mUISessionListList;
            }
        }
        
        public UISpecialSessionListList1 UISpecialSessionListList
        {
            get
            {
                if ((this.mUISpecialSessionListList == null))
                {
                    this.mUISpecialSessionListList = new UISpecialSessionListList1(this);
                }
                return this.mUISpecialSessionListList;
            }
        }
        
        public WpfButton UIAccomButtonButton
        {
            get
            {
                if ((this.mUIAccomButtonButton == null))
                {
                    this.mUIAccomButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIAccomButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "AccomButton";
                    this.mUIAccomButtonButton.WindowTitles.Add("Manager Panel");
                    #endregion
                }
                return this.mUIAccomButtonButton;
            }
        }
        
        public WpfButton UITravelButtonButton
        {
            get
            {
                if ((this.mUITravelButtonButton == null))
                {
                    this.mUITravelButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUITravelButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "TravelButton";
                    this.mUITravelButtonButton.WindowTitles.Add("Manager Panel");
                    #endregion
                }
                return this.mUITravelButtonButton;
            }
        }
        
        public WpfButton UIEmergButtonButton
        {
            get
            {
                if ((this.mUIEmergButtonButton == null))
                {
                    this.mUIEmergButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIEmergButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "EmergButton";
                    this.mUIEmergButtonButton.WindowTitles.Add("Manager Panel");
                    #endregion
                }
                return this.mUIEmergButtonButton;
            }
        }
        
        public WpfButton UIManageAccountButton
        {
            get
            {
                if ((this.mUIManageAccountButton == null))
                {
                    this.mUIManageAccountButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIManageAccountButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ManageAccount";
                    this.mUIManageAccountButton.WindowTitles.Add("Manager Panel");
                    #endregion
                }
                return this.mUIManageAccountButton;
            }
        }
        
        public WpfButton UIManageAuthorButton
        {
            get
            {
                if ((this.mUIManageAuthorButton == null))
                {
                    this.mUIManageAuthorButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIManageAuthorButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ManageAuthor";
                    this.mUIManageAuthorButton.WindowTitles.Add("Manager Panel");
                    #endregion
                }
                return this.mUIManageAuthorButton;
            }
        }
        
        public WpfButton UIManageEventButton
        {
            get
            {
                if ((this.mUIManageEventButton == null))
                {
                    this.mUIManageEventButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIManageEventButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ManageEvent";
                    this.mUIManageEventButton.WindowTitles.Add("Manager Panel");
                    #endregion
                }
                return this.mUIManageEventButton;
            }
        }
        
        public WpfButton UIManageAwardsButton
        {
            get
            {
                if ((this.mUIManageAwardsButton == null))
                {
                    this.mUIManageAwardsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIManageAwardsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ManageAward";
                    this.mUIManageAwardsButton.WindowTitles.Add("Manager Panel");
                    #endregion
                }
                return this.mUIManageAwardsButton;
            }
        }
        
        public WpfButton UIManageTasksButton
        {
            get
            {
                if ((this.mUIManageTasksButton == null))
                {
                    this.mUIManageTasksButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIManageTasksButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ManageTasks";
                    this.mUIManageTasksButton.WindowTitles.Add("Manager Panel");
                    #endregion
                }
                return this.mUIManageTasksButton;
            }
        }
        
        public WpfButton UIManageSessionsButton
        {
            get
            {
                if ((this.mUIManageSessionsButton == null))
                {
                    this.mUIManageSessionsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIManageSessionsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ManageSessions";
                    this.mUIManageSessionsButton.WindowTitles.Add("Manager Panel");
                    #endregion
                }
                return this.mUIManageSessionsButton;
            }
        }
        
        public WpfButton UIManageEmergencyButton
        {
            get
            {
                if ((this.mUIManageEmergencyButton == null))
                {
                    this.mUIManageEmergencyButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIManageEmergencyButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ManageEmergency";
                    this.mUIManageEmergencyButton.WindowTitles.Add("Manager Panel");
                    #endregion
                }
                return this.mUIManageEmergencyButton;
            }
        }
        
        public WpfButton UIManageAccommodationButton
        {
            get
            {
                if ((this.mUIManageAccommodationButton == null))
                {
                    this.mUIManageAccommodationButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIManageAccommodationButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ManageAccom";
                    this.mUIManageAccommodationButton.WindowTitles.Add("Manager Panel");
                    #endregion
                }
                return this.mUIManageAccommodationButton;
            }
        }
        
        public WpfButton UIManageTravelButton
        {
            get
            {
                if ((this.mUIManageTravelButton == null))
                {
                    this.mUIManageTravelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIManageTravelButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ManageTravel";
                    this.mUIManageTravelButton.WindowTitles.Add("Manager Panel");
                    #endregion
                }
                return this.mUIManageTravelButton;
            }
        }
        
        public WpfButton UIManageWelcomePackButton
        {
            get
            {
                if ((this.mUIManageWelcomePackButton == null))
                {
                    this.mUIManageWelcomePackButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIManageWelcomePackButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ManageWelcomePack";
                    this.mUIManageWelcomePackButton.WindowTitles.Add("Manager Panel");
                    #endregion
                }
                return this.mUIManageWelcomePackButton;
            }
        }
        
        public WpfButton UILogoutButton
        {
            get
            {
                if ((this.mUILogoutButton == null))
                {
                    this.mUILogoutButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUILogoutButton.SearchProperties[WpfButton.PropertyNames.Name] = "logout";
                    this.mUILogoutButton.WindowTitles.Add("Manager Panel");
                    #endregion
                }
                return this.mUILogoutButton;
            }
        }
        
        public WpfButton UIReviewArticlesButton
        {
            get
            {
                if ((this.mUIReviewArticlesButton == null))
                {
                    this.mUIReviewArticlesButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIReviewArticlesButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ReviewArticles";
                    this.mUIReviewArticlesButton.WindowTitles.Add("Manager Panel");
                    #endregion
                }
                return this.mUIReviewArticlesButton;
            }
        }
        #endregion
        
        #region Fields
        private UISessionListList1 mUISessionListList;
        
        private UISpecialSessionListList1 mUISpecialSessionListList;
        
        private WpfButton mUIAccomButtonButton;
        
        private WpfButton mUITravelButtonButton;
        
        private WpfButton mUIEmergButtonButton;
        
        private WpfButton mUIManageAccountButton;
        
        private WpfButton mUIManageAuthorButton;
        
        private WpfButton mUIManageEventButton;
        
        private WpfButton mUIManageAwardsButton;
        
        private WpfButton mUIManageTasksButton;
        
        private WpfButton mUIManageSessionsButton;
        
        private WpfButton mUIManageEmergencyButton;
        
        private WpfButton mUIManageAccommodationButton;
        
        private WpfButton mUIManageTravelButton;
        
        private WpfButton mUIManageWelcomePackButton;
        
        private WpfButton mUILogoutButton;
        
        private WpfButton mUIReviewArticlesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISessionListList1 : WpfList
    {
        
        public UISessionListList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "SessionList";
            this.WindowTitles.Add("Manager Panel");
            #endregion
        }
        
        #region Properties
        public WpfListItem UICMSBEDTOSessionDTOListItem
        {
            get
            {
                if ((this.mUICMSBEDTOSessionDTOListItem == null))
                {
                    this.mUICMSBEDTOSessionDTOListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUICMSBEDTOSessionDTOListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "CMS.BE.DTO.SessionDTO";
                    this.mUICMSBEDTOSessionDTOListItem.WindowTitles.Add("Manager Panel");
                    #endregion
                }
                return this.mUICMSBEDTOSessionDTOListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUICMSBEDTOSessionDTOListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISpecialSessionListList1 : WpfList
    {
        
        public UISpecialSessionListList1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "SpecialSessionList";
            this.WindowTitles.Add("Manager Panel");
            #endregion
        }
        
        #region Properties
        public WpfListItem UICMSBEDTOSpecialSessiListItem
        {
            get
            {
                if ((this.mUICMSBEDTOSpecialSessiListItem == null))
                {
                    this.mUICMSBEDTOSpecialSessiListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUICMSBEDTOSpecialSessiListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "CMS.BE.DTO.SpecialSessionDTO";
                    this.mUICMSBEDTOSpecialSessiListItem.WindowTitles.Add("Manager Panel");
                    #endregion
                }
                return this.mUICMSBEDTOSpecialSessiListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUICMSBEDTOSpecialSessiListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIManageAccountWindow : WpfWindow
    {
        
        public UIManageAccountWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Manage Account";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Manage Account");
            #endregion
        }
        
        #region Properties
        public WpfButton UIAddAccountButton
        {
            get
            {
                if ((this.mUIAddAccountButton == null))
                {
                    this.mUIAddAccountButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIAddAccountButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "AddAccount";
                    this.mUIAddAccountButton.WindowTitles.Add("Manage Account");
                    #endregion
                }
                return this.mUIAddAccountButton;
            }
        }
        
        public WpfEdit UILoginBoxEdit
        {
            get
            {
                if ((this.mUILoginBoxEdit == null))
                {
                    this.mUILoginBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUILoginBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "LoginBox";
                    this.mUILoginBoxEdit.WindowTitles.Add("Manage Account");
                    #endregion
                }
                return this.mUILoginBoxEdit;
            }
        }
        
        public WpfButton UIEditAccountButton
        {
            get
            {
                if ((this.mUIEditAccountButton == null))
                {
                    this.mUIEditAccountButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIEditAccountButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "EditAccount";
                    this.mUIEditAccountButton.WindowTitles.Add("Manage Account");
                    #endregion
                }
                return this.mUIEditAccountButton;
            }
        }
        
        public WpfButton UILoadRolesButton
        {
            get
            {
                if ((this.mUILoadRolesButton == null))
                {
                    this.mUILoadRolesButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUILoadRolesButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "LoadRoles";
                    this.mUILoadRolesButton.WindowTitles.Add("Manage Account");
                    #endregion
                }
                return this.mUILoadRolesButton;
            }
        }
        
        public WpfComboBox UIAccountRoleBoxComboBox
        {
            get
            {
                if ((this.mUIAccountRoleBoxComboBox == null))
                {
                    this.mUIAccountRoleBoxComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUIAccountRoleBoxComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "AccountRoleBox";
                    this.mUIAccountRoleBoxComboBox.WindowTitles.Add("Manage Account");
                    #endregion
                }
                return this.mUIAccountRoleBoxComboBox;
            }
        }
        
        public WpfComboBox UIRoleBoxComboBox
        {
            get
            {
                if ((this.mUIRoleBoxComboBox == null))
                {
                    this.mUIRoleBoxComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUIRoleBoxComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "RoleBox";
                    this.mUIRoleBoxComboBox.WindowTitles.Add("Manage Account");
                    #endregion
                }
                return this.mUIRoleBoxComboBox;
            }
        }
        
        public WpfButton UIPART_CloseButton
        {
            get
            {
                if ((this.mUIPART_CloseButton == null))
                {
                    this.mUIPART_CloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIPART_CloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_Close";
                    this.mUIPART_CloseButton.WindowTitles.Add("Manage Account");
                    #endregion
                }
                return this.mUIPART_CloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIAddAccountButton;
        
        private WpfEdit mUILoginBoxEdit;
        
        private WpfButton mUIEditAccountButton;
        
        private WpfButton mUILoadRolesButton;
        
        private WpfComboBox mUIAccountRoleBoxComboBox;
        
        private WpfComboBox mUIRoleBoxComboBox;
        
        private WpfButton mUIPART_CloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAddAccountWindow : WpfWindow
    {
        
        public UIAddAccountWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Add Account";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Add Account");
            #endregion
        }
        
        #region Properties
        public WpfButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "CancelButton";
                    this.mUICancelButton.WindowTitles.Add("Add Account");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEditAccountWindow : WpfWindow
    {
        
        public UIEditAccountWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Edit Account";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Edit Account");
            #endregion
        }
        
        #region Properties
        public WpfButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "CancelButton";
                    this.mUICancelButton.WindowTitles.Add("Edit Account");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIManageAuthorWindow : WpfWindow
    {
        
        public UIManageAuthorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Manage Author";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Manage Author");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIAuthorBoxEdit
        {
            get
            {
                if ((this.mUIAuthorBoxEdit == null))
                {
                    this.mUIAuthorBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIAuthorBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "AuthorBox";
                    this.mUIAuthorBoxEdit.WindowTitles.Add("Manage Author");
                    #endregion
                }
                return this.mUIAuthorBoxEdit;
            }
        }
        
        public WpfButton UIEditAuthorButton
        {
            get
            {
                if ((this.mUIEditAuthorButton == null))
                {
                    this.mUIEditAuthorButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIEditAuthorButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "GoToEditAuthor";
                    this.mUIEditAuthorButton.WindowTitles.Add("Manage Author");
                    #endregion
                }
                return this.mUIEditAuthorButton;
            }
        }
        
        public WpfButton UIPART_CloseButton
        {
            get
            {
                if ((this.mUIPART_CloseButton == null))
                {
                    this.mUIPART_CloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIPART_CloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_Close";
                    this.mUIPART_CloseButton.WindowTitles.Add("Manage Author");
                    #endregion
                }
                return this.mUIPART_CloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIAuthorBoxEdit;
        
        private WpfButton mUIEditAuthorButton;
        
        private WpfButton mUIPART_CloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEditAuthorWindow : WpfWindow
    {
        
        public UIEditAuthorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Edit Author";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Edit Author");
            #endregion
        }
        
        #region Properties
        public WpfButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "CancelButton";
                    this.mUICancelButton.WindowTitles.Add("Edit Author");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIManageEventsWindow : WpfWindow
    {
        
        public UIManageEventsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Manage Events";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Manage Events");
            #endregion
        }
        
        #region Properties
        public WpfButton UIPART_CloseButton
        {
            get
            {
                if ((this.mUIPART_CloseButton == null))
                {
                    this.mUIPART_CloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIPART_CloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_Close";
                    this.mUIPART_CloseButton.WindowTitles.Add("Manage Events");
                    #endregion
                }
                return this.mUIPART_CloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIPART_CloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIManageAwardsWindow : WpfWindow
    {
        
        public UIManageAwardsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Manage Awards";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Manage Awards");
            #endregion
        }
        
        #region Properties
        public WpfList UISessionListList
        {
            get
            {
                if ((this.mUISessionListList == null))
                {
                    this.mUISessionListList = new WpfList(this);
                    #region Search Criteria
                    this.mUISessionListList.SearchProperties[WpfList.PropertyNames.AutomationId] = "SessionList";
                    this.mUISessionListList.WindowTitles.Add("Manage Awards");
                    #endregion
                }
                return this.mUISessionListList;
            }
        }
        
        public WpfComboBox UISessionComboBoxComboBox
        {
            get
            {
                if ((this.mUISessionComboBoxComboBox == null))
                {
                    this.mUISessionComboBoxComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUISessionComboBoxComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "SessionComboBox";
                    this.mUISessionComboBoxComboBox.WindowTitles.Add("Manage Awards");
                    #endregion
                }
                return this.mUISessionComboBoxComboBox;
            }
        }
        
        public WpfButton UIPART_CloseButton
        {
            get
            {
                if ((this.mUIPART_CloseButton == null))
                {
                    this.mUIPART_CloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIPART_CloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_Close";
                    this.mUIPART_CloseButton.WindowTitles.Add("Manage Awards");
                    #endregion
                }
                return this.mUIPART_CloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfList mUISessionListList;
        
        private WpfComboBox mUISessionComboBoxComboBox;
        
        private WpfButton mUIPART_CloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIManageTasksWindow : WpfWindow
    {
        
        public UIManageTasksWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Manage Tasks";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Manage Tasks");
            #endregion
        }
        
        #region Properties
        public WpfButton UIPART_CloseButton
        {
            get
            {
                if ((this.mUIPART_CloseButton == null))
                {
                    this.mUIPART_CloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIPART_CloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_Close";
                    this.mUIPART_CloseButton.WindowTitles.Add("Manage Tasks");
                    #endregion
                }
                return this.mUIPART_CloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIPART_CloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISessionsWindow : WpfWindow
    {
        
        public UISessionsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Sessions";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Sessions");
            #endregion
        }
        
        #region Properties
        public WpfButton UIAddButton
        {
            get
            {
                if ((this.mUIAddButton == null))
                {
                    this.mUIAddButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIAddButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "AddSession";
                    this.mUIAddButton.WindowTitles.Add("Sessions");
                    #endregion
                }
                return this.mUIAddButton;
            }
        }
        
        public WpfButton UIPART_CloseButton
        {
            get
            {
                if ((this.mUIPART_CloseButton == null))
                {
                    this.mUIPART_CloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIPART_CloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_Close";
                    this.mUIPART_CloseButton.WindowTitles.Add("Sessions");
                    #endregion
                }
                return this.mUIPART_CloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIAddButton;
        
        private WpfButton mUIPART_CloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAddSessionWindow : WpfWindow
    {
        
        public UIAddSessionWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Add Session";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Add Session");
            #endregion
        }
        
        #region Properties
        public WpfButton UIM3452H31V385C2966399Button
        {
            get
            {
                if ((this.mUIM3452H31V385C2966399Button == null))
                {
                    this.mUIM3452H31V385C2966399Button = new WpfButton(this);
                    #region Search Criteria
                    this.mUIM3452H31V385C2966399Button.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_Button";
                    this.mUIM3452H31V385C2966399Button.WindowTitles.Add("Add Session");
                    #endregion
                }
                return this.mUIM3452H31V385C2966399Button;
            }
        }
        
        public WpfCalendar UIPART_CalendarCalendar
        {
            get
            {
                if ((this.mUIPART_CalendarCalendar == null))
                {
                    this.mUIPART_CalendarCalendar = new WpfCalendar(this);
                    #region Search Criteria
                    this.mUIPART_CalendarCalendar.SearchProperties[WpfCalendar.PropertyNames.AutomationId] = "PART_Calendar";
                    this.mUIPART_CalendarCalendar.WindowTitles.Add("Add Session");
                    #endregion
                }
                return this.mUIPART_CalendarCalendar;
            }
        }
        
        public WpfButton UIM3452H31V385C2966399Button1
        {
            get
            {
                if ((this.mUIM3452H31V385C2966399Button1 == null))
                {
                    this.mUIM3452H31V385C2966399Button1 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIM3452H31V385C2966399Button1.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_Button";
                    this.mUIM3452H31V385C2966399Button1.SearchProperties[WpfButton.PropertyNames.Instance] = "2";
                    this.mUIM3452H31V385C2966399Button1.WindowTitles.Add("Add Session");
                    #endregion
                }
                return this.mUIM3452H31V385C2966399Button1;
            }
        }
        
        public WpfCalendar UIPART_CalendarCalendar1
        {
            get
            {
                if ((this.mUIPART_CalendarCalendar1 == null))
                {
                    this.mUIPART_CalendarCalendar1 = new WpfCalendar(this);
                    #region Search Criteria
                    this.mUIPART_CalendarCalendar1.SearchProperties[WpfCalendar.PropertyNames.AutomationId] = "PART_Calendar";
                    this.mUIPART_CalendarCalendar1.WindowTitles.Add("Add Session");
                    #endregion
                }
                return this.mUIPART_CalendarCalendar1;
            }
        }
        
        public WpfComboBox UIPART_HourPickerComboBox
        {
            get
            {
                if ((this.mUIPART_HourPickerComboBox == null))
                {
                    this.mUIPART_HourPickerComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUIPART_HourPickerComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "PART_HourPicker";
                    this.mUIPART_HourPickerComboBox.WindowTitles.Add("Add Session");
                    #endregion
                }
                return this.mUIPART_HourPickerComboBox;
            }
        }
        
        public WpfEdit UIChairmanBoxEdit
        {
            get
            {
                if ((this.mUIChairmanBoxEdit == null))
                {
                    this.mUIChairmanBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIChairmanBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "ChairmanBox";
                    this.mUIChairmanBoxEdit.WindowTitles.Add("Add Session");
                    #endregion
                }
                return this.mUIChairmanBoxEdit;
            }
        }
        
        public WpfComboBox UIBuildingBoxComboBox
        {
            get
            {
                if ((this.mUIBuildingBoxComboBox == null))
                {
                    this.mUIBuildingBoxComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUIBuildingBoxComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "BuildingBox";
                    this.mUIBuildingBoxComboBox.WindowTitles.Add("Add Session");
                    #endregion
                }
                return this.mUIBuildingBoxComboBox;
            }
        }
        
        public WpfCheckBox UISpecialsessionCheckBox
        {
            get
            {
                if ((this.mUISpecialsessionCheckBox == null))
                {
                    this.mUISpecialsessionCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUISpecialsessionCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "SpecialSessionCheck";
                    this.mUISpecialsessionCheckBox.WindowTitles.Add("Add Session");
                    #endregion
                }
                return this.mUISpecialsessionCheckBox;
            }
        }
        
        public WpfButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "CancelButton";
                    this.mUICancelButton.WindowTitles.Add("Add Session");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIM3452H31V385C2966399Button;
        
        private WpfCalendar mUIPART_CalendarCalendar;
        
        private WpfButton mUIM3452H31V385C2966399Button1;
        
        private WpfCalendar mUIPART_CalendarCalendar1;
        
        private WpfComboBox mUIPART_HourPickerComboBox;
        
        private WpfEdit mUIChairmanBoxEdit;
        
        private WpfComboBox mUIBuildingBoxComboBox;
        
        private WpfCheckBox mUISpecialsessionCheckBox;
        
        private WpfButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIEditEmergencyInfoWindow : WpfWindow
    {
        
        public UIEditEmergencyInfoWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Edit Emergency Info";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Edit Emergency Info");
            #endregion
        }
        
        #region Properties
        public WpfButton UIPART_CloseButton
        {
            get
            {
                if ((this.mUIPART_CloseButton == null))
                {
                    this.mUIPART_CloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIPART_CloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_Close";
                    this.mUIPART_CloseButton.WindowTitles.Add("Edit Emergency Info");
                    #endregion
                }
                return this.mUIPART_CloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIPART_CloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIManageAccommodationOWindow : WpfWindow
    {
        
        public UIManageAccommodationOWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Manage Accommodation Options";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Manage Accommodation Options");
            #endregion
        }
        
        #region Properties
        public WpfButton UIPART_CloseButton
        {
            get
            {
                if ((this.mUIPART_CloseButton == null))
                {
                    this.mUIPART_CloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIPART_CloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_Close";
                    this.mUIPART_CloseButton.WindowTitles.Add("Manage Accommodation Options");
                    #endregion
                }
                return this.mUIPART_CloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIPART_CloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIManageTravelOptionsWindow : WpfWindow
    {
        
        public UIManageTravelOptionsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Manage Travel Options";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Manage Travel Options");
            #endregion
        }
        
        #region Properties
        public WpfButton UIPART_CloseButton
        {
            get
            {
                if ((this.mUIPART_CloseButton == null))
                {
                    this.mUIPART_CloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIPART_CloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_Close";
                    this.mUIPART_CloseButton.WindowTitles.Add("Manage Travel Options");
                    #endregion
                }
                return this.mUIPART_CloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIPART_CloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIGuestsListWindow : WpfWindow
    {
        
        public UIGuestsListWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Guests List";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Guests List");
            #endregion
        }
        
        #region Properties
        public WpfButton UIPART_CloseButton
        {
            get
            {
                if ((this.mUIPART_CloseButton == null))
                {
                    this.mUIPART_CloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIPART_CloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_Close";
                    this.mUIPART_CloseButton.WindowTitles.Add("Guests List");
                    #endregion
                }
                return this.mUIPART_CloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIPART_CloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAuthorPanelWindow : WpfWindow
    {
        
        public UIAuthorPanelWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Author Panel";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Author Panel");
            #endregion
        }
        
        #region Properties
        public WpfButton UIAddButton
        {
            get
            {
                if ((this.mUIAddButton == null))
                {
                    this.mUIAddButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIAddButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "AddArticles";
                    this.mUIAddButton.WindowTitles.Add("Author Panel");
                    #endregion
                }
                return this.mUIAddButton;
            }
        }
        
        public WpfButton UILogoutButton
        {
            get
            {
                if ((this.mUILogoutButton == null))
                {
                    this.mUILogoutButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUILogoutButton.SearchProperties[WpfButton.PropertyNames.Name] = "logout";
                    this.mUILogoutButton.WindowTitles.Add("Author Panel");
                    #endregion
                }
                return this.mUILogoutButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIAddButton;
        
        private WpfButton mUILogoutButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISubmitArticlesWindow : WpfWindow
    {
        
        public UISubmitArticlesWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Submit Articles";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Submit Articles");
            #endregion
        }
        
        #region Properties
        public WpfCheckBox UISpecialSessionCheckBox
        {
            get
            {
                if ((this.mUISpecialSessionCheckBox == null))
                {
                    this.mUISpecialSessionCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUISpecialSessionCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "SSCheck";
                    this.mUISpecialSessionCheckBox.WindowTitles.Add("Submit Articles");
                    #endregion
                }
                return this.mUISpecialSessionCheckBox;
            }
        }
        
        public WpfComboBox UISSListComboBox
        {
            get
            {
                if ((this.mUISSListComboBox == null))
                {
                    this.mUISSListComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUISSListComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "SSList";
                    this.mUISSListComboBox.WindowTitles.Add("Submit Articles");
                    #endregion
                }
                return this.mUISSListComboBox;
            }
        }
        
        public WpfButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "CancelButton";
                    this.mUICancelButton.WindowTitles.Add("Submit Articles");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfCheckBox mUISpecialSessionCheckBox;
        
        private WpfComboBox mUISSListComboBox;
        
        private WpfButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIReviewerPanelWindow : WpfWindow
    {
        
        public UIReviewerPanelWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Reviewer Panel";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Reviewer Panel");
            #endregion
        }
        
        #region Properties
        public WpfButton UIMyReviewsButton
        {
            get
            {
                if ((this.mUIMyReviewsButton == null))
                {
                    this.mUIMyReviewsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIMyReviewsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "MyReviewsButton";
                    this.mUIMyReviewsButton.WindowTitles.Add("Reviewer Panel");
                    #endregion
                }
                return this.mUIMyReviewsButton;
            }
        }
        
        public WpfButton UIPART_CloseButton
        {
            get
            {
                if ((this.mUIPART_CloseButton == null))
                {
                    this.mUIPART_CloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIPART_CloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_Close";
                    this.mUIPART_CloseButton.WindowTitles.Add("Reviewer Panel");
                    #endregion
                }
                return this.mUIPART_CloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIMyReviewsButton;
        
        private WpfButton mUIPART_CloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMyReviewsWindow : WpfWindow
    {
        
        public UIMyReviewsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "My Reviews";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("My Reviews");
            #endregion
        }
        
        #region Properties
        public WpfButton UIPART_CloseButton
        {
            get
            {
                if ((this.mUIPART_CloseButton == null))
                {
                    this.mUIPART_CloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIPART_CloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "PART_Close";
                    this.mUIPART_CloseButton.WindowTitles.Add("My Reviews");
                    #endregion
                }
                return this.mUIPART_CloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIPART_CloseButton;
        #endregion
    }
}
